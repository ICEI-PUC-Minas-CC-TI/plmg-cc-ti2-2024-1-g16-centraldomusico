import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import { TrainingAPIClientContext } from "./trainingAPIClientContext";
declare class TrainingAPIClient extends TrainingAPIClientContext {
    /**
     * Initializes a new instance of the TrainingAPIClient class.
     * @param endpoint Supported Cognitive Services endpoints.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param [options] The parameter options
     */
    constructor(credentials: msRest.ServiceClientCredentials, endpoint: string, options?: msRest.ServiceClientOptions);
    /**
     * @summary Get a list of the available domains.
     * @param [options] The optional parameters
     * @returns Promise<Models.GetDomainsResponse>
     */
    getDomains(options?: msRest.RequestOptionsBase): Promise<Models.GetDomainsResponse>;
    /**
     * @param callback The callback
     */
    getDomains(callback: msRest.ServiceCallback<Models.Domain[]>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    getDomains(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Domain[]>): void;
    /**
     * @summary Get information about a specific domain.
     * @param domainId The id of the domain to get information about.
     * @param [options] The optional parameters
     * @returns Promise<Models.GetDomainResponse>
     */
    getDomain(domainId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetDomainResponse>;
    /**
     * @param domainId The id of the domain to get information about.
     * @param callback The callback
     */
    getDomain(domainId: string, callback: msRest.ServiceCallback<Models.Domain>): void;
    /**
     * @param domainId The id of the domain to get information about.
     * @param options The optional parameters
     * @param callback The callback
     */
    getDomain(domainId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Domain>): void;
    /**
     * @summary Get your projects.
     * @param [options] The optional parameters
     * @returns Promise<Models.GetProjectsResponse>
     */
    getProjects(options?: msRest.RequestOptionsBase): Promise<Models.GetProjectsResponse>;
    /**
     * @param callback The callback
     */
    getProjects(callback: msRest.ServiceCallback<Models.Project[]>): void;
    /**
     * @param options The optional parameters
     * @param callback The callback
     */
    getProjects(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Project[]>): void;
    /**
     * @summary Create a project.
     * @param name Name of the project.
     * @param [options] The optional parameters
     * @returns Promise<Models.CreateProjectResponse>
     */
    createProject(name: string, options?: Models.TrainingAPIClientCreateProjectOptionalParams): Promise<Models.CreateProjectResponse>;
    /**
     * @param name Name of the project.
     * @param callback The callback
     */
    createProject(name: string, callback: msRest.ServiceCallback<Models.Project>): void;
    /**
     * @param name Name of the project.
     * @param options The optional parameters
     * @param callback The callback
     */
    createProject(name: string, options: Models.TrainingAPIClientCreateProjectOptionalParams, callback: msRest.ServiceCallback<Models.Project>): void;
    /**
     * @summary Get a specific project.
     * @param projectId The id of the project to get.
     * @param [options] The optional parameters
     * @returns Promise<Models.GetProjectResponse>
     */
    getProject(projectId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetProjectResponse>;
    /**
     * @param projectId The id of the project to get.
     * @param callback The callback
     */
    getProject(projectId: string, callback: msRest.ServiceCallback<Models.Project>): void;
    /**
     * @param projectId The id of the project to get.
     * @param options The optional parameters
     * @param callback The callback
     */
    getProject(projectId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Project>): void;
    /**
     * @summary Delete a specific project.
     * @param projectId The project id.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteProject(projectId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param projectId The project id.
     * @param callback The callback
     */
    deleteProject(projectId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param projectId The project id.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteProject(projectId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * @summary Update a specific project.
     * @param projectId The id of the project to update.
     * @param updatedProject The updated project model.
     * @param [options] The optional parameters
     * @returns Promise<Models.UpdateProjectResponse>
     */
    updateProject(projectId: string, updatedProject: Models.Project, options?: msRest.RequestOptionsBase): Promise<Models.UpdateProjectResponse>;
    /**
     * @param projectId The id of the project to update.
     * @param updatedProject The updated project model.
     * @param callback The callback
     */
    updateProject(projectId: string, updatedProject: Models.Project, callback: msRest.ServiceCallback<Models.Project>): void;
    /**
     * @param projectId The id of the project to update.
     * @param updatedProject The updated project model.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateProject(projectId: string, updatedProject: Models.Project, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Project>): void;
    /**
     * @summary Get artifact content from blob storage, based on artifact relative path in the blob.
     * @param projectId The project id.
     * @param path The relative path for artifact.
     * @param [options] The optional parameters
     * @returns Promise<Models.GetArtifactResponse>
     */
    getArtifact(projectId: string, path: string, options?: msRest.RequestOptionsBase): Promise<Models.GetArtifactResponse>;
    /**
     * @param projectId The project id.
     * @param path The relative path for artifact.
     * @param callback The callback
     */
    getArtifact(projectId: string, path: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param projectId The project id.
     * @param path The relative path for artifact.
     * @param options The optional parameters
     * @param callback The callback
     */
    getArtifact(projectId: string, path: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * @summary Exports a project.
     * @param projectId The project id of the project to export.
     * @param [options] The optional parameters
     * @returns Promise<Models.ExportProjectResponse>
     */
    exportProject(projectId: string, options?: msRest.RequestOptionsBase): Promise<Models.ExportProjectResponse>;
    /**
     * @param projectId The project id of the project to export.
     * @param callback The callback
     */
    exportProject(projectId: string, callback: msRest.ServiceCallback<Models.ProjectExport>): void;
    /**
     * @param projectId The project id of the project to export.
     * @param options The optional parameters
     * @param callback The callback
     */
    exportProject(projectId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ProjectExport>): void;
    /**
     * This API supports batching and range selection. By default it will only return first 50 images
     * matching images.
     * Use the {take} and {skip} parameters to control how many images to return in a given batch.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the
     * "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned
     * @summary Get images for a given project iteration or workspace.
     * @param projectId The project id.
     * @param [options] The optional parameters
     * @returns Promise<Models.GetImagesResponse>
     */
    getImages(projectId: string, options?: Models.TrainingAPIClientGetImagesOptionalParams): Promise<Models.GetImagesResponse>;
    /**
     * @param projectId The project id.
     * @param callback The callback
     */
    getImages(projectId: string, callback: msRest.ServiceCallback<Models.Image[]>): void;
    /**
     * @param projectId The project id.
     * @param options The optional parameters
     * @param callback The callback
     */
    getImages(projectId: string, options: Models.TrainingAPIClientGetImagesOptionalParams, callback: msRest.ServiceCallback<Models.Image[]>): void;
    /**
     * This API accepts body content as multipart/form-data and application/octet-stream. When using
     * multipart
     * multiple image files can be sent at once, with a maximum of 64 files.
     * If all images are successful created, 200(OK) status code will be returned.
     * Otherwise, 207 (Multi-Status) status code will be returned and detail status for each image will
     * be listed in the response payload.
     * @summary Add the provided images to the set of training images.
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports
     * images up to 6MB.
     * @param [options] The optional parameters
     * @returns Promise<Models.CreateImagesFromDataResponse>
     */
    createImagesFromData(projectId: string, imageData: msRest.HttpRequestBody, options?: Models.TrainingAPIClientCreateImagesFromDataOptionalParams): Promise<Models.CreateImagesFromDataResponse>;
    /**
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports
     * images up to 6MB.
     * @param callback The callback
     */
    createImagesFromData(projectId: string, imageData: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.ImageCreateSummary>): void;
    /**
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports
     * images up to 6MB.
     * @param options The optional parameters
     * @param callback The callback
     */
    createImagesFromData(projectId: string, imageData: msRest.HttpRequestBody, options: Models.TrainingAPIClientCreateImagesFromDataOptionalParams, callback: msRest.ServiceCallback<Models.ImageCreateSummary>): void;
    /**
     * @summary Delete images from the set of training images.
     * @param projectId The project id.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteImages(projectId: string, options?: Models.TrainingAPIClientDeleteImagesOptionalParams): Promise<msRest.RestResponse>;
    /**
     * @param projectId The project id.
     * @param callback The callback
     */
    deleteImages(projectId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param projectId The project id.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteImages(projectId: string, options: Models.TrainingAPIClientDeleteImagesOptionalParams, callback: msRest.ServiceCallback<void>): void;
    /**
     * This API will get region proposals for an image along with confidences for the region. It
     * returns an empty array if no proposals are found.
     * @summary Get region proposals for an image. Returns empty array if no proposals are found.
     * @param projectId The project id.
     * @param imageId The image id.
     * @param [options] The optional parameters
     * @returns Promise<Models.GetImageRegionProposalsResponse>
     */
    getImageRegionProposals(projectId: string, imageId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetImageRegionProposalsResponse>;
    /**
     * @param projectId The project id.
     * @param imageId The image id.
     * @param callback The callback
     */
    getImageRegionProposals(projectId: string, imageId: string, callback: msRest.ServiceCallback<Models.ImageRegionProposal>): void;
    /**
     * @param projectId The project id.
     * @param imageId The image id.
     * @param options The optional parameters
     * @param callback The callback
     */
    getImageRegionProposals(projectId: string, imageId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ImageRegionProposal>): void;
    /**
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the
     * "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned
     * @summary Get the number of images.
     * @param projectId The project id.
     * @param [options] The optional parameters
     * @returns Promise<Models.GetImageCountResponse>
     */
    getImageCount(projectId: string, options?: Models.TrainingAPIClientGetImageCountOptionalParams): Promise<Models.GetImageCountResponse>;
    /**
     * @param projectId The project id.
     * @param callback The callback
     */
    getImageCount(projectId: string, callback: msRest.ServiceCallback<number>): void;
    /**
     * @param projectId The project id.
     * @param options The optional parameters
     * @param callback The callback
     */
    getImageCount(projectId: string, options: Models.TrainingAPIClientGetImageCountOptionalParams, callback: msRest.ServiceCallback<number>): void;
    /**
     * This API accepts a batch of files, and optionally tags, to create images. There is a limit of 64
     * images and 20 tags.
     * If all images are successful created, 200(OK) status code will be returned.
     * Otherwise, 207 (Multi-Status) status code will be returned and detail status for each image will
     * be listed in the response payload.
     * @summary Add the provided batch of images to the set of training images.
     * @param projectId The project id.
     * @param batch The batch of image files to add. Limited to 64 images and 20 tags per batch.
     * @param [options] The optional parameters
     * @returns Promise<Models.CreateImagesFromFilesResponse>
     */
    createImagesFromFiles(projectId: string, batch: Models.ImageFileCreateBatch, options?: msRest.RequestOptionsBase): Promise<Models.CreateImagesFromFilesResponse>;
    /**
     * @param projectId The project id.
     * @param batch The batch of image files to add. Limited to 64 images and 20 tags per batch.
     * @param callback The callback
     */
    createImagesFromFiles(projectId: string, batch: Models.ImageFileCreateBatch, callback: msRest.ServiceCallback<Models.ImageCreateSummary>): void;
    /**
     * @param projectId The project id.
     * @param batch The batch of image files to add. Limited to 64 images and 20 tags per batch.
     * @param options The optional parameters
     * @param callback The callback
     */
    createImagesFromFiles(projectId: string, batch: Models.ImageFileCreateBatch, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ImageCreateSummary>): void;
    /**
     * This API will return a set of Images for the specified tags and optionally iteration. If no
     * iteration is specified the
     * current workspace is used.
     * @summary Get images by id for a given project iteration.
     * @param projectId The project id.
     * @param [options] The optional parameters
     * @returns Promise<Models.GetImagesByIdsResponse>
     */
    getImagesByIds(projectId: string, options?: Models.TrainingAPIClientGetImagesByIdsOptionalParams): Promise<Models.GetImagesByIdsResponse>;
    /**
     * @param projectId The project id.
     * @param callback The callback
     */
    getImagesByIds(projectId: string, callback: msRest.ServiceCallback<Models.Image[]>): void;
    /**
     * @param projectId The project id.
     * @param options The optional parameters
     * @param callback The callback
     */
    getImagesByIds(projectId: string, options: Models.TrainingAPIClientGetImagesByIdsOptionalParams, callback: msRest.ServiceCallback<Models.Image[]>): void;
    /**
     * This API accepts a batch of image Ids, and metadata, to update images. There is a limit of 64
     * images.
     * @summary Update metadata of images.
     * @param projectId The project id.
     * @param imageIds The list of image ids to update. Limited to 64.
     * @param metadata The metadata to be updated to the specified images. Limited to 10 key-value
     * pairs per image. The length of key is limited to 128. The length of value is limited to 256.
     * @param [options] The optional parameters
     * @returns Promise<Models.UpdateImageMetadataResponse>
     */
    updateImageMetadata(projectId: string, imageIds: string[], metadata: {
        [propertyName: string]: string;
    }, options?: msRest.RequestOptionsBase): Promise<Models.UpdateImageMetadataResponse>;
    /**
     * @param projectId The project id.
     * @param imageIds The list of image ids to update. Limited to 64.
     * @param metadata The metadata to be updated to the specified images. Limited to 10 key-value
     * pairs per image. The length of key is limited to 128. The length of value is limited to 256.
     * @param callback The callback
     */
    updateImageMetadata(projectId: string, imageIds: string[], metadata: {
        [propertyName: string]: string;
    }, callback: msRest.ServiceCallback<Models.ImageMetadataUpdateSummary>): void;
    /**
     * @param projectId The project id.
     * @param imageIds The list of image ids to update. Limited to 64.
     * @param metadata The metadata to be updated to the specified images. Limited to 10 key-value
     * pairs per image. The length of key is limited to 128. The length of value is limited to 256.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateImageMetadata(projectId: string, imageIds: string[], metadata: {
        [propertyName: string]: string;
    }, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ImageMetadataUpdateSummary>): void;
    /**
     * This API creates a batch of images from predicted images specified. There is a limit of 64
     * images and 20 tags.
     * If all images are successful created, 200(OK) status code will be returned.
     * Otherwise, 207 (Multi-Status) status code will be returned and detail status for each image will
     * be listed in the response payload.
     * @summary Add the specified predicted images to the set of training images.
     * @param projectId The project id.
     * @param batch Image, tag ids, and metadata. Limited to 64 images and 20 tags per batch.
     * @param [options] The optional parameters
     * @returns Promise<Models.CreateImagesFromPredictionsResponse>
     */
    createImagesFromPredictions(projectId: string, batch: Models.ImageIdCreateBatch, options?: msRest.RequestOptionsBase): Promise<Models.CreateImagesFromPredictionsResponse>;
    /**
     * @param projectId The project id.
     * @param batch Image, tag ids, and metadata. Limited to 64 images and 20 tags per batch.
     * @param callback The callback
     */
    createImagesFromPredictions(projectId: string, batch: Models.ImageIdCreateBatch, callback: msRest.ServiceCallback<Models.ImageCreateSummary>): void;
    /**
     * @param projectId The project id.
     * @param batch Image, tag ids, and metadata. Limited to 64 images and 20 tags per batch.
     * @param options The optional parameters
     * @param callback The callback
     */
    createImagesFromPredictions(projectId: string, batch: Models.ImageIdCreateBatch, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ImageCreateSummary>): void;
    /**
     * This API accepts a batch of image regions, and optionally tags, to update existing images with
     * region information.
     * There is a limit of 64 entries in the batch.
     * If all regions are successful created, 200(OK) status code will be returned.
     * Otherwise, 207 (Multi-Status) status code will be returned and detail status for each region
     * will be listed in the response payload.
     * @summary Create a set of image regions.
     * @param projectId The project id.
     * @param batch Batch of image regions which include a tag and bounding box. Limited to 64.
     * @param [options] The optional parameters
     * @returns Promise<Models.CreateImageRegionsResponse>
     */
    createImageRegions(projectId: string, batch: Models.ImageRegionCreateBatch, options?: msRest.RequestOptionsBase): Promise<Models.CreateImageRegionsResponse>;
    /**
     * @param projectId The project id.
     * @param batch Batch of image regions which include a tag and bounding box. Limited to 64.
     * @param callback The callback
     */
    createImageRegions(projectId: string, batch: Models.ImageRegionCreateBatch, callback: msRest.ServiceCallback<Models.ImageRegionCreateSummary>): void;
    /**
     * @param projectId The project id.
     * @param batch Batch of image regions which include a tag and bounding box. Limited to 64.
     * @param options The optional parameters
     * @param callback The callback
     */
    createImageRegions(projectId: string, batch: Models.ImageRegionCreateBatch, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ImageRegionCreateSummary>): void;
    /**
     * @summary Delete a set of image regions.
     * @param projectId The project id.
     * @param regionIds Regions to delete. Limited to 64.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteImageRegions(projectId: string, regionIds: string[], options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param projectId The project id.
     * @param regionIds Regions to delete. Limited to 64.
     * @param callback The callback
     */
    deleteImageRegions(projectId: string, regionIds: string[], callback: msRest.ServiceCallback<void>): void;
    /**
     * @param projectId The project id.
     * @param regionIds Regions to delete. Limited to 64.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteImageRegions(projectId: string, regionIds: string[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * This API will fetch untagged images filtered by suggested tags Ids. It returns an empty array if
     * no images are found.
     * @summary Get untagged images whose suggested tags match given tags. Returns empty array if no
     * images are found.
     * @param projectId The project id.
     * @param iterationId IterationId to use for the suggested tags and regions.
     * @param query Contains properties we need to query suggested images.
     * @param [options] The optional parameters
     * @returns Promise<Models.QuerySuggestedImagesResponse>
     */
    querySuggestedImages(projectId: string, iterationId: string, query: Models.SuggestedTagAndRegionQueryToken, options?: msRest.RequestOptionsBase): Promise<Models.QuerySuggestedImagesResponse>;
    /**
     * @param projectId The project id.
     * @param iterationId IterationId to use for the suggested tags and regions.
     * @param query Contains properties we need to query suggested images.
     * @param callback The callback
     */
    querySuggestedImages(projectId: string, iterationId: string, query: Models.SuggestedTagAndRegionQueryToken, callback: msRest.ServiceCallback<Models.SuggestedTagAndRegionQuery>): void;
    /**
     * @param projectId The project id.
     * @param iterationId IterationId to use for the suggested tags and regions.
     * @param query Contains properties we need to query suggested images.
     * @param options The optional parameters
     * @param callback The callback
     */
    querySuggestedImages(projectId: string, iterationId: string, query: Models.SuggestedTagAndRegionQueryToken, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SuggestedTagAndRegionQuery>): void;
    /**
     * This API takes in tagIds to get count of untagged images per suggested tags for a given
     * threshold.
     * @summary Get count of images whose suggested tags match given tags and their probabilities are
     * greater than or equal to the given threshold. Returns count as 0 if none found.
     * @param projectId The project id.
     * @param iterationId IterationId to use for the suggested tags and regions.
     * @param query Model that contains tagIds, threshold and projectType to query by.
     * @param [options] The optional parameters
     * @returns Promise<Models.QuerySuggestedImageCountResponse>
     */
    querySuggestedImageCount(projectId: string, iterationId: string, query: Models.TagFilter, options?: msRest.RequestOptionsBase): Promise<Models.QuerySuggestedImageCountResponse>;
    /**
     * @param projectId The project id.
     * @param iterationId IterationId to use for the suggested tags and regions.
     * @param query Model that contains tagIds, threshold and projectType to query by.
     * @param callback The callback
     */
    querySuggestedImageCount(projectId: string, iterationId: string, query: Models.TagFilter, callback: msRest.ServiceCallback<{
        [propertyName: string]: number;
    }>): void;
    /**
     * @param projectId The project id.
     * @param iterationId IterationId to use for the suggested tags and regions.
     * @param query Model that contains tagIds, threshold and projectType to query by.
     * @param options The optional parameters
     * @param callback The callback
     */
    querySuggestedImageCount(projectId: string, iterationId: string, query: Models.TagFilter, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<{
        [propertyName: string]: number;
    }>): void;
    /**
     * This API supports batching and range selection. By default it will only return first 50 images
     * matching images.
     * Use the {take} and {skip} parameters to control how many images to return in a given batch.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the
     * "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned
     * @summary Get tagged images for a given project iteration.
     * @param projectId The project id.
     * @param [options] The optional parameters
     * @returns Promise<Models.GetTaggedImagesResponse>
     */
    getTaggedImages(projectId: string, options?: Models.TrainingAPIClientGetTaggedImagesOptionalParams): Promise<Models.GetTaggedImagesResponse>;
    /**
     * @param projectId The project id.
     * @param callback The callback
     */
    getTaggedImages(projectId: string, callback: msRest.ServiceCallback<Models.Image[]>): void;
    /**
     * @param projectId The project id.
     * @param options The optional parameters
     * @param callback The callback
     */
    getTaggedImages(projectId: string, options: Models.TrainingAPIClientGetTaggedImagesOptionalParams, callback: msRest.ServiceCallback<Models.Image[]>): void;
    /**
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the
     * "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned
     * @summary Gets the number of images tagged with the provided {tagIds}.
     * @param projectId The project id.
     * @param [options] The optional parameters
     * @returns Promise<Models.GetTaggedImageCountResponse>
     */
    getTaggedImageCount(projectId: string, options?: Models.TrainingAPIClientGetTaggedImageCountOptionalParams): Promise<Models.GetTaggedImageCountResponse>;
    /**
     * @param projectId The project id.
     * @param callback The callback
     */
    getTaggedImageCount(projectId: string, callback: msRest.ServiceCallback<number>): void;
    /**
     * @param projectId The project id.
     * @param options The optional parameters
     * @param callback The callback
     */
    getTaggedImageCount(projectId: string, options: Models.TrainingAPIClientGetTaggedImageCountOptionalParams, callback: msRest.ServiceCallback<number>): void;
    /**
     * @summary Associate a set of images with a set of tags.
     * @param projectId The project id.
     * @param batch Batch of image tags. Limited to 128 tags per batch.
     * @param [options] The optional parameters
     * @returns Promise<Models.CreateImageTagsResponse>
     */
    createImageTags(projectId: string, batch: Models.ImageTagCreateBatch, options?: msRest.RequestOptionsBase): Promise<Models.CreateImageTagsResponse>;
    /**
     * @param projectId The project id.
     * @param batch Batch of image tags. Limited to 128 tags per batch.
     * @param callback The callback
     */
    createImageTags(projectId: string, batch: Models.ImageTagCreateBatch, callback: msRest.ServiceCallback<Models.ImageTagCreateSummary>): void;
    /**
     * @param projectId The project id.
     * @param batch Batch of image tags. Limited to 128 tags per batch.
     * @param options The optional parameters
     * @param callback The callback
     */
    createImageTags(projectId: string, batch: Models.ImageTagCreateBatch, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ImageTagCreateSummary>): void;
    /**
     * @summary Remove a set of tags from a set of images.
     * @param projectId The project id.
     * @param imageIds Image ids. Limited to 64 images.
     * @param tagIds Tags to be deleted from the specified images. Limited to 20 tags.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteImageTags(projectId: string, imageIds: string[], tagIds: string[], options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param projectId The project id.
     * @param imageIds Image ids. Limited to 64 images.
     * @param tagIds Tags to be deleted from the specified images. Limited to 20 tags.
     * @param callback The callback
     */
    deleteImageTags(projectId: string, imageIds: string[], tagIds: string[], callback: msRest.ServiceCallback<void>): void;
    /**
     * @param projectId The project id.
     * @param imageIds Image ids. Limited to 64 images.
     * @param tagIds Tags to be deleted from the specified images. Limited to 20 tags.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteImageTags(projectId: string, imageIds: string[], tagIds: string[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * This API supports batching and range selection. By default it will only return first 50 images
     * matching images.
     * Use the {take} and {skip} parameters to control how many images to return in a given batch.
     * @summary Get untagged images for a given project iteration.
     * @param projectId The project id.
     * @param [options] The optional parameters
     * @returns Promise<Models.GetUntaggedImagesResponse>
     */
    getUntaggedImages(projectId: string, options?: Models.TrainingAPIClientGetUntaggedImagesOptionalParams): Promise<Models.GetUntaggedImagesResponse>;
    /**
     * @param projectId The project id.
     * @param callback The callback
     */
    getUntaggedImages(projectId: string, callback: msRest.ServiceCallback<Models.Image[]>): void;
    /**
     * @param projectId The project id.
     * @param options The optional parameters
     * @param callback The callback
     */
    getUntaggedImages(projectId: string, options: Models.TrainingAPIClientGetUntaggedImagesOptionalParams, callback: msRest.ServiceCallback<Models.Image[]>): void;
    /**
     * This API returns the images which have no tags for a given project and optionally an iteration.
     * If no iteration is specified the
     * current workspace is used.
     * @summary Gets the number of untagged images.
     * @param projectId The project id.
     * @param [options] The optional parameters
     * @returns Promise<Models.GetUntaggedImageCountResponse>
     */
    getUntaggedImageCount(projectId: string, options?: Models.TrainingAPIClientGetUntaggedImageCountOptionalParams): Promise<Models.GetUntaggedImageCountResponse>;
    /**
     * @param projectId The project id.
     * @param callback The callback
     */
    getUntaggedImageCount(projectId: string, callback: msRest.ServiceCallback<number>): void;
    /**
     * @param projectId The project id.
     * @param options The optional parameters
     * @param callback The callback
     */
    getUntaggedImageCount(projectId: string, options: Models.TrainingAPIClientGetUntaggedImageCountOptionalParams, callback: msRest.ServiceCallback<number>): void;
    /**
     * This API accepts a batch of urls, and optionally tags, to create images. There is a limit of 64
     * images and 20 tags.
     * If all images are successful created, 200(OK) status code will be returned.
     * Otherwise, 207 (Multi-Status) status code will be returned and detail status for each image will
     * be listed in the response payload.
     * @summary Add the provided images urls to the set of training images.
     * @param projectId The project id.
     * @param batch Image urls, tag ids, and metadata. Limited to 64 images and 20 tags per batch.
     * @param [options] The optional parameters
     * @returns Promise<Models.CreateImagesFromUrlsResponse>
     */
    createImagesFromUrls(projectId: string, batch: Models.ImageUrlCreateBatch, options?: msRest.RequestOptionsBase): Promise<Models.CreateImagesFromUrlsResponse>;
    /**
     * @param projectId The project id.
     * @param batch Image urls, tag ids, and metadata. Limited to 64 images and 20 tags per batch.
     * @param callback The callback
     */
    createImagesFromUrls(projectId: string, batch: Models.ImageUrlCreateBatch, callback: msRest.ServiceCallback<Models.ImageCreateSummary>): void;
    /**
     * @param projectId The project id.
     * @param batch Image urls, tag ids, and metadata. Limited to 64 images and 20 tags per batch.
     * @param options The optional parameters
     * @param callback The callback
     */
    createImagesFromUrls(projectId: string, batch: Models.ImageUrlCreateBatch, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ImageCreateSummary>): void;
    /**
     * @summary Get iterations for the project.
     * @param projectId The project id.
     * @param [options] The optional parameters
     * @returns Promise<Models.GetIterationsResponse>
     */
    getIterations(projectId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetIterationsResponse>;
    /**
     * @param projectId The project id.
     * @param callback The callback
     */
    getIterations(projectId: string, callback: msRest.ServiceCallback<Models.Iteration[]>): void;
    /**
     * @param projectId The project id.
     * @param options The optional parameters
     * @param callback The callback
     */
    getIterations(projectId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Iteration[]>): void;
    /**
     * @summary Get a specific iteration.
     * @param projectId The id of the project the iteration belongs to.
     * @param iterationId The id of the iteration to get.
     * @param [options] The optional parameters
     * @returns Promise<Models.GetIterationResponse>
     */
    getIteration(projectId: string, iterationId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetIterationResponse>;
    /**
     * @param projectId The id of the project the iteration belongs to.
     * @param iterationId The id of the iteration to get.
     * @param callback The callback
     */
    getIteration(projectId: string, iterationId: string, callback: msRest.ServiceCallback<Models.Iteration>): void;
    /**
     * @param projectId The id of the project the iteration belongs to.
     * @param iterationId The id of the iteration to get.
     * @param options The optional parameters
     * @param callback The callback
     */
    getIteration(projectId: string, iterationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Iteration>): void;
    /**
     * @summary Delete a specific iteration of a project.
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteIteration(projectId: string, iterationId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param callback The callback
     */
    deleteIteration(projectId: string, iterationId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteIteration(projectId: string, iterationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * @summary Update a specific iteration.
     * @param projectId Project id.
     * @param iterationId Iteration id.
     * @param updatedIteration The updated iteration model.
     * @param [options] The optional parameters
     * @returns Promise<Models.UpdateIterationResponse>
     */
    updateIteration(projectId: string, iterationId: string, updatedIteration: Models.Iteration, options?: msRest.RequestOptionsBase): Promise<Models.UpdateIterationResponse>;
    /**
     * @param projectId Project id.
     * @param iterationId Iteration id.
     * @param updatedIteration The updated iteration model.
     * @param callback The callback
     */
    updateIteration(projectId: string, iterationId: string, updatedIteration: Models.Iteration, callback: msRest.ServiceCallback<Models.Iteration>): void;
    /**
     * @param projectId Project id.
     * @param iterationId Iteration id.
     * @param updatedIteration The updated iteration model.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateIteration(projectId: string, iterationId: string, updatedIteration: Models.Iteration, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Iteration>): void;
    /**
     * @summary Get the list of exports for a specific iteration.
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param [options] The optional parameters
     * @returns Promise<Models.GetExportsResponse>
     */
    getExports(projectId: string, iterationId: string, options?: msRest.RequestOptionsBase): Promise<Models.GetExportsResponse>;
    /**
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param callback The callback
     */
    getExports(projectId: string, iterationId: string, callback: msRest.ServiceCallback<Models.ExportModel[]>): void;
    /**
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param options The optional parameters
     * @param callback The callback
     */
    getExports(projectId: string, iterationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ExportModel[]>): void;
    /**
     * @summary Export a trained iteration.
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param platform The target platform. Possible values include: 'CoreML', 'TensorFlow',
     * 'DockerFile', 'ONNX', 'VAIDK', 'OpenVino'
     * @param [options] The optional parameters
     * @returns Promise<Models.ExportIterationResponse>
     */
    exportIteration(projectId: string, iterationId: string, platform: Models.Platform, options?: Models.TrainingAPIClientExportIterationOptionalParams): Promise<Models.ExportIterationResponse>;
    /**
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param platform The target platform. Possible values include: 'CoreML', 'TensorFlow',
     * 'DockerFile', 'ONNX', 'VAIDK', 'OpenVino'
     * @param callback The callback
     */
    exportIteration(projectId: string, iterationId: string, platform: Models.Platform, callback: msRest.ServiceCallback<Models.ExportModel>): void;
    /**
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param platform The target platform. Possible values include: 'CoreML', 'TensorFlow',
     * 'DockerFile', 'ONNX', 'VAIDK', 'OpenVino'
     * @param options The optional parameters
     * @param callback The callback
     */
    exportIteration(projectId: string, iterationId: string, platform: Models.Platform, options: Models.TrainingAPIClientExportIterationOptionalParams, callback: msRest.ServiceCallback<Models.ExportModel>): void;
    /**
     * @summary Get detailed performance information about an iteration.
     * @param projectId The id of the project the iteration belongs to.
     * @param iterationId The id of the iteration to get.
     * @param [options] The optional parameters
     * @returns Promise<Models.GetIterationPerformanceResponse>
     */
    getIterationPerformance(projectId: string, iterationId: string, options?: Models.TrainingAPIClientGetIterationPerformanceOptionalParams): Promise<Models.GetIterationPerformanceResponse>;
    /**
     * @param projectId The id of the project the iteration belongs to.
     * @param iterationId The id of the iteration to get.
     * @param callback The callback
     */
    getIterationPerformance(projectId: string, iterationId: string, callback: msRest.ServiceCallback<Models.IterationPerformance>): void;
    /**
     * @param projectId The id of the project the iteration belongs to.
     * @param iterationId The id of the iteration to get.
     * @param options The optional parameters
     * @param callback The callback
     */
    getIterationPerformance(projectId: string, iterationId: string, options: Models.TrainingAPIClientGetIterationPerformanceOptionalParams, callback: msRest.ServiceCallback<Models.IterationPerformance>): void;
    /**
     * This API supports batching and range selection. By default it will only return first 50 images
     * matching images.
     * Use the {take} and {skip} parameters to control how many images to return in a given batch.
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the
     * "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned
     * @summary Get image with its prediction for a given project iteration.
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param [options] The optional parameters
     * @returns Promise<Models.GetImagePerformancesResponse>
     */
    getImagePerformances(projectId: string, iterationId: string, options?: Models.TrainingAPIClientGetImagePerformancesOptionalParams): Promise<Models.GetImagePerformancesResponse>;
    /**
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param callback The callback
     */
    getImagePerformances(projectId: string, iterationId: string, callback: msRest.ServiceCallback<Models.ImagePerformance[]>): void;
    /**
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param options The optional parameters
     * @param callback The callback
     */
    getImagePerformances(projectId: string, iterationId: string, options: Models.TrainingAPIClientGetImagePerformancesOptionalParams, callback: msRest.ServiceCallback<Models.ImagePerformance[]>): void;
    /**
     * The filtering is on an and/or relationship. For example, if the provided tag ids are for the
     * "Dog" and
     * "Cat" tags, then only images tagged with Dog and/or Cat will be returned
     * @summary Gets the number of images tagged with the provided {tagIds} that have prediction
     * results from
     * training for the provided iteration {iterationId}.
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param [options] The optional parameters
     * @returns Promise<Models.GetImagePerformanceCountResponse>
     */
    getImagePerformanceCount(projectId: string, iterationId: string, options?: Models.TrainingAPIClientGetImagePerformanceCountOptionalParams): Promise<Models.GetImagePerformanceCountResponse>;
    /**
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param callback The callback
     */
    getImagePerformanceCount(projectId: string, iterationId: string, callback: msRest.ServiceCallback<number>): void;
    /**
     * @param projectId The project id.
     * @param iterationId The iteration id. Defaults to workspace.
     * @param options The optional parameters
     * @param callback The callback
     */
    getImagePerformanceCount(projectId: string, iterationId: string, options: Models.TrainingAPIClientGetImagePerformanceCountOptionalParams, callback: msRest.ServiceCallback<number>): void;
    /**
     * @summary Publish a specific iteration.
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param publishName The name to give the published iteration.
     * @param predictionId The id of the prediction resource to publish to.
     * @param [options] The optional parameters
     * @returns Promise<Models.PublishIterationResponse>
     */
    publishIteration(projectId: string, iterationId: string, publishName: string, predictionId: string, options?: Models.TrainingAPIClientPublishIterationOptionalParams): Promise<Models.PublishIterationResponse>;
    /**
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param publishName The name to give the published iteration.
     * @param predictionId The id of the prediction resource to publish to.
     * @param callback The callback
     */
    publishIteration(projectId: string, iterationId: string, publishName: string, predictionId: string, callback: msRest.ServiceCallback<boolean>): void;
    /**
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param publishName The name to give the published iteration.
     * @param predictionId The id of the prediction resource to publish to.
     * @param options The optional parameters
     * @param callback The callback
     */
    publishIteration(projectId: string, iterationId: string, publishName: string, predictionId: string, options: Models.TrainingAPIClientPublishIterationOptionalParams, callback: msRest.ServiceCallback<boolean>): void;
    /**
     * @summary Unpublish a specific iteration.
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    unpublishIteration(projectId: string, iterationId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param callback The callback
     */
    unpublishIteration(projectId: string, iterationId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param projectId The project id.
     * @param iterationId The iteration id.
     * @param options The optional parameters
     * @param callback The callback
     */
    unpublishIteration(projectId: string, iterationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * @summary Delete a set of predicted images and their associated prediction results.
     * @param projectId The project id.
     * @param ids The prediction ids. Limited to 64.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deletePrediction(projectId: string, ids: string[], options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param projectId The project id.
     * @param ids The prediction ids. Limited to 64.
     * @param callback The callback
     */
    deletePrediction(projectId: string, ids: string[], callback: msRest.ServiceCallback<void>): void;
    /**
     * @param projectId The project id.
     * @param ids The prediction ids. Limited to 64.
     * @param options The optional parameters
     * @param callback The callback
     */
    deletePrediction(projectId: string, ids: string[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * @summary Get images that were sent to your prediction endpoint.
     * @param projectId The project id.
     * @param query Parameters used to query the predictions. Limited to combining 2 tags.
     * @param [options] The optional parameters
     * @returns Promise<Models.QueryPredictionsResponse>
     */
    queryPredictions(projectId: string, query: Models.PredictionQueryToken, options?: msRest.RequestOptionsBase): Promise<Models.QueryPredictionsResponse>;
    /**
     * @param projectId The project id.
     * @param query Parameters used to query the predictions. Limited to combining 2 tags.
     * @param callback The callback
     */
    queryPredictions(projectId: string, query: Models.PredictionQueryToken, callback: msRest.ServiceCallback<Models.PredictionQueryResult>): void;
    /**
     * @param projectId The project id.
     * @param query Parameters used to query the predictions. Limited to combining 2 tags.
     * @param options The optional parameters
     * @param callback The callback
     */
    queryPredictions(projectId: string, query: Models.PredictionQueryToken, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PredictionQueryResult>): void;
    /**
     * @summary Quick test an image.
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports
     * images up to 6MB.
     * @param [options] The optional parameters
     * @returns Promise<Models.QuickTestImageResponse>
     */
    quickTestImage(projectId: string, imageData: msRest.HttpRequestBody, options?: Models.TrainingAPIClientQuickTestImageOptionalParams): Promise<Models.QuickTestImageResponse>;
    /**
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports
     * images up to 6MB.
     * @param callback The callback
     */
    quickTestImage(projectId: string, imageData: msRest.HttpRequestBody, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
    /**
     * @param projectId The project id.
     * @param imageData Binary image data. Supported formats are JPEG, GIF, PNG, and BMP. Supports
     * images up to 6MB.
     * @param options The optional parameters
     * @param callback The callback
     */
    quickTestImage(projectId: string, imageData: msRest.HttpRequestBody, options: Models.TrainingAPIClientQuickTestImageOptionalParams, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
    /**
     * @summary Quick test an image url.
     * @param projectId The project to evaluate against.
     * @param imageUrl An ImageUrl that contains the url of the image to be evaluated.
     * @param [options] The optional parameters
     * @returns Promise<Models.QuickTestImageUrlResponse>
     */
    quickTestImageUrl(projectId: string, imageUrl: Models.ImageUrl, options?: Models.TrainingAPIClientQuickTestImageUrlOptionalParams): Promise<Models.QuickTestImageUrlResponse>;
    /**
     * @param projectId The project to evaluate against.
     * @param imageUrl An ImageUrl that contains the url of the image to be evaluated.
     * @param callback The callback
     */
    quickTestImageUrl(projectId: string, imageUrl: Models.ImageUrl, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
    /**
     * @param projectId The project to evaluate against.
     * @param imageUrl An ImageUrl that contains the url of the image to be evaluated.
     * @param options The optional parameters
     * @param callback The callback
     */
    quickTestImageUrl(projectId: string, imageUrl: Models.ImageUrl, options: Models.TrainingAPIClientQuickTestImageUrlOptionalParams, callback: msRest.ServiceCallback<Models.ImagePrediction>): void;
    /**
     * @summary Get the tags for a given project and iteration.
     * @param projectId The project id.
     * @param [options] The optional parameters
     * @returns Promise<Models.GetTagsResponse>
     */
    getTags(projectId: string, options?: Models.TrainingAPIClientGetTagsOptionalParams): Promise<Models.GetTagsResponse>;
    /**
     * @param projectId The project id.
     * @param callback The callback
     */
    getTags(projectId: string, callback: msRest.ServiceCallback<Models.Tag[]>): void;
    /**
     * @param projectId The project id.
     * @param options The optional parameters
     * @param callback The callback
     */
    getTags(projectId: string, options: Models.TrainingAPIClientGetTagsOptionalParams, callback: msRest.ServiceCallback<Models.Tag[]>): void;
    /**
     * @summary Create a tag for the project.
     * @param projectId The project id.
     * @param name The tag name.
     * @param [options] The optional parameters
     * @returns Promise<Models.CreateTagResponse>
     */
    createTag(projectId: string, name: string, options?: Models.TrainingAPIClientCreateTagOptionalParams): Promise<Models.CreateTagResponse>;
    /**
     * @param projectId The project id.
     * @param name The tag name.
     * @param callback The callback
     */
    createTag(projectId: string, name: string, callback: msRest.ServiceCallback<Models.Tag>): void;
    /**
     * @param projectId The project id.
     * @param name The tag name.
     * @param options The optional parameters
     * @param callback The callback
     */
    createTag(projectId: string, name: string, options: Models.TrainingAPIClientCreateTagOptionalParams, callback: msRest.ServiceCallback<Models.Tag>): void;
    /**
     * @summary Get information about a specific tag.
     * @param projectId The project this tag belongs to.
     * @param tagId The tag id.
     * @param [options] The optional parameters
     * @returns Promise<Models.GetTagResponse>
     */
    getTag(projectId: string, tagId: string, options?: Models.TrainingAPIClientGetTagOptionalParams): Promise<Models.GetTagResponse>;
    /**
     * @param projectId The project this tag belongs to.
     * @param tagId The tag id.
     * @param callback The callback
     */
    getTag(projectId: string, tagId: string, callback: msRest.ServiceCallback<Models.Tag>): void;
    /**
     * @param projectId The project this tag belongs to.
     * @param tagId The tag id.
     * @param options The optional parameters
     * @param callback The callback
     */
    getTag(projectId: string, tagId: string, options: Models.TrainingAPIClientGetTagOptionalParams, callback: msRest.ServiceCallback<Models.Tag>): void;
    /**
     * @summary Delete a tag from the project.
     * @param projectId The project id.
     * @param tagId Id of the tag to be deleted.
     * @param [options] The optional parameters
     * @returns Promise<msRest.RestResponse>
     */
    deleteTag(projectId: string, tagId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
    /**
     * @param projectId The project id.
     * @param tagId Id of the tag to be deleted.
     * @param callback The callback
     */
    deleteTag(projectId: string, tagId: string, callback: msRest.ServiceCallback<void>): void;
    /**
     * @param projectId The project id.
     * @param tagId Id of the tag to be deleted.
     * @param options The optional parameters
     * @param callback The callback
     */
    deleteTag(projectId: string, tagId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
    /**
     * @summary Update a tag.
     * @param projectId The project id.
     * @param tagId The id of the target tag.
     * @param updatedTag The updated tag model.
     * @param [options] The optional parameters
     * @returns Promise<Models.UpdateTagResponse>
     */
    updateTag(projectId: string, tagId: string, updatedTag: Models.Tag, options?: msRest.RequestOptionsBase): Promise<Models.UpdateTagResponse>;
    /**
     * @param projectId The project id.
     * @param tagId The id of the target tag.
     * @param updatedTag The updated tag model.
     * @param callback The callback
     */
    updateTag(projectId: string, tagId: string, updatedTag: Models.Tag, callback: msRest.ServiceCallback<Models.Tag>): void;
    /**
     * @param projectId The project id.
     * @param tagId The id of the target tag.
     * @param updatedTag The updated tag model.
     * @param options The optional parameters
     * @param callback The callback
     */
    updateTag(projectId: string, tagId: string, updatedTag: Models.Tag, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Tag>): void;
    /**
     * This API will get suggested tags and regions for an array/batch of untagged images along with
     * confidences for the tags. It returns an empty array if no tags are found.
     * There is a limit of 64 images in the batch.
     * @summary Suggest tags and regions for an array/batch of untagged images. Returns empty array if
     * no tags are found.
     * @param projectId The project id.
     * @param iterationId IterationId to use for tag and region suggestion.
     * @param imageIds Array of image ids tag suggestion are needed for. Use GetUntaggedImages API to
     * get imageIds.
     * @param [options] The optional parameters
     * @returns Promise<Models.SuggestTagsAndRegionsResponse>
     */
    suggestTagsAndRegions(projectId: string, iterationId: string, imageIds: string[], options?: msRest.RequestOptionsBase): Promise<Models.SuggestTagsAndRegionsResponse>;
    /**
     * @param projectId The project id.
     * @param iterationId IterationId to use for tag and region suggestion.
     * @param imageIds Array of image ids tag suggestion are needed for. Use GetUntaggedImages API to
     * get imageIds.
     * @param callback The callback
     */
    suggestTagsAndRegions(projectId: string, iterationId: string, imageIds: string[], callback: msRest.ServiceCallback<Models.SuggestedTagAndRegion[]>): void;
    /**
     * @param projectId The project id.
     * @param iterationId IterationId to use for tag and region suggestion.
     * @param imageIds Array of image ids tag suggestion are needed for. Use GetUntaggedImages API to
     * get imageIds.
     * @param options The optional parameters
     * @param callback The callback
     */
    suggestTagsAndRegions(projectId: string, iterationId: string, imageIds: string[], options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SuggestedTagAndRegion[]>): void;
    /**
     * @summary Queues project for training.
     * @param projectId The project id.
     * @param [options] The optional parameters
     * @returns Promise<Models.TrainProjectResponse>
     */
    trainProject(projectId: string, options?: Models.TrainingAPIClientTrainProjectOptionalParams): Promise<Models.TrainProjectResponse>;
    /**
     * @param projectId The project id.
     * @param callback The callback
     */
    trainProject(projectId: string, callback: msRest.ServiceCallback<Models.Iteration>): void;
    /**
     * @param projectId The project id.
     * @param options The optional parameters
     * @param callback The callback
     */
    trainProject(projectId: string, options: Models.TrainingAPIClientTrainProjectOptionalParams, callback: msRest.ServiceCallback<Models.Iteration>): void;
    /**
     * @summary Imports a project.
     * @param token Token generated from the export project call.
     * @param [options] The optional parameters
     * @returns Promise<Models.ImportProjectResponse>
     */
    importProject(token: string, options?: Models.TrainingAPIClientImportProjectOptionalParams): Promise<Models.ImportProjectResponse>;
    /**
     * @param token Token generated from the export project call.
     * @param callback The callback
     */
    importProject(token: string, callback: msRest.ServiceCallback<Models.Project>): void;
    /**
     * @param token Token generated from the export project call.
     * @param options The optional parameters
     * @param callback The callback
     */
    importProject(token: string, options: Models.TrainingAPIClientImportProjectOptionalParams, callback: msRest.ServiceCallback<Models.Project>): void;
}
export { TrainingAPIClient, TrainingAPIClientContext, Models as TrainingAPIModels, Mappers as TrainingAPIMappers };
//# sourceMappingURL=trainingAPIClient.d.ts.map