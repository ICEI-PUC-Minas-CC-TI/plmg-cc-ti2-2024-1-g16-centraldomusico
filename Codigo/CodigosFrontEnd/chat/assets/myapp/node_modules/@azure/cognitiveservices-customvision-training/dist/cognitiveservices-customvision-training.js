/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@azure/ms-rest-js')) :
    typeof define === 'function' && define.amd ? define(['exports', '@azure/ms-rest-js'], factory) :
    (global = global || self, factory((global.Azure = global.Azure || {}, global.Azure.CognitiveservicesCustomvisionTraining = {}), global.msRest));
}(this, (function (exports, msRest) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */

    var index = /*#__PURE__*/Object.freeze({
        __proto__: null
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is regenerated.
     */
    var BoundingBox = {
        serializedName: "BoundingBox",
        type: {
            name: "Composite",
            className: "BoundingBox",
            modelProperties: {
                left: {
                    required: true,
                    nullable: false,
                    serializedName: "left",
                    type: {
                        name: "Number"
                    }
                },
                top: {
                    required: true,
                    nullable: false,
                    serializedName: "top",
                    type: {
                        name: "Number"
                    }
                },
                width: {
                    required: true,
                    nullable: false,
                    serializedName: "width",
                    type: {
                        name: "Number"
                    }
                },
                height: {
                    required: true,
                    nullable: false,
                    serializedName: "height",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var CreateProjectOptions = {
        serializedName: "CreateProjectOptions",
        type: {
            name: "Composite",
            className: "CreateProjectOptions",
            modelProperties: {
                exportModelContainerUri: {
                    nullable: false,
                    serializedName: "exportModelContainerUri",
                    type: {
                        name: "String"
                    }
                },
                notificationQueueUri: {
                    nullable: false,
                    serializedName: "notificationQueueUri",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var CustomBaseModelInfo = {
        serializedName: "CustomBaseModelInfo",
        type: {
            name: "Composite",
            className: "CustomBaseModelInfo",
            modelProperties: {
                projectId: {
                    required: true,
                    nullable: false,
                    serializedName: "projectId",
                    type: {
                        name: "Uuid"
                    }
                },
                iterationId: {
                    required: true,
                    nullable: false,
                    serializedName: "iterationId",
                    type: {
                        name: "Uuid"
                    }
                }
            }
        }
    };
    var CustomVisionError = {
        serializedName: "CustomVisionError",
        type: {
            name: "Composite",
            className: "CustomVisionError",
            modelProperties: {
                code: {
                    required: true,
                    serializedName: "code",
                    type: {
                        name: "String"
                    }
                },
                message: {
                    required: true,
                    serializedName: "message",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ModelInformation = {
        serializedName: "ModelInformation",
        type: {
            name: "Composite",
            className: "ModelInformation",
            modelProperties: {
                estimatedModelSizeInMegabytes: {
                    serializedName: "estimatedModelSizeInMegabytes",
                    type: {
                        name: "Number"
                    }
                },
                description: {
                    required: true,
                    nullable: false,
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Domain = {
        serializedName: "Domain",
        type: {
            name: "Composite",
            className: "Domain",
            modelProperties: {
                id: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "Uuid"
                    }
                },
                name: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                exportable: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "exportable",
                    type: {
                        name: "Boolean"
                    }
                },
                enabled: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "enabled",
                    type: {
                        name: "Boolean"
                    }
                },
                exportablePlatforms: {
                    readOnly: true,
                    serializedName: "exportablePlatforms",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                modelInformation: {
                    readOnly: true,
                    serializedName: "modelInformation",
                    type: {
                        name: "Composite",
                        className: "ModelInformation"
                    }
                }
            }
        }
    };
    var ExportModel = {
        serializedName: "Export",
        type: {
            name: "Composite",
            className: "ExportModel",
            modelProperties: {
                platform: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "platform",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                downloadUri: {
                    readOnly: true,
                    serializedName: "downloadUri",
                    type: {
                        name: "String"
                    }
                },
                flavor: {
                    nullable: true,
                    readOnly: true,
                    serializedName: "flavor",
                    type: {
                        name: "String"
                    }
                },
                newerVersionAvailable: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "newerVersionAvailable",
                    type: {
                        name: "Boolean"
                    }
                }
            }
        }
    };
    var ImageTag = {
        serializedName: "ImageTag",
        type: {
            name: "Composite",
            className: "ImageTag",
            modelProperties: {
                tagId: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "tagId",
                    type: {
                        name: "Uuid"
                    }
                },
                tagName: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "tagName",
                    type: {
                        name: "String"
                    }
                },
                created: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "created",
                    type: {
                        name: "DateTime"
                    }
                }
            }
        }
    };
    var ImageRegion = {
        serializedName: "ImageRegion",
        type: {
            name: "Composite",
            className: "ImageRegion",
            modelProperties: {
                regionId: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "regionId",
                    type: {
                        name: "Uuid"
                    }
                },
                tagName: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "tagName",
                    type: {
                        name: "String"
                    }
                },
                created: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "created",
                    type: {
                        name: "DateTime"
                    }
                },
                tagId: {
                    required: true,
                    nullable: false,
                    serializedName: "tagId",
                    type: {
                        name: "Uuid"
                    }
                },
                left: {
                    required: true,
                    nullable: false,
                    serializedName: "left",
                    type: {
                        name: "Number"
                    }
                },
                top: {
                    required: true,
                    nullable: false,
                    serializedName: "top",
                    type: {
                        name: "Number"
                    }
                },
                width: {
                    required: true,
                    nullable: false,
                    serializedName: "width",
                    type: {
                        name: "Number"
                    }
                },
                height: {
                    required: true,
                    nullable: false,
                    serializedName: "height",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var Image = {
        serializedName: "Image",
        type: {
            name: "Composite",
            className: "Image",
            modelProperties: {
                id: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "Uuid"
                    }
                },
                created: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "created",
                    type: {
                        name: "DateTime"
                    }
                },
                width: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "width",
                    type: {
                        name: "Number"
                    }
                },
                height: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "height",
                    type: {
                        name: "Number"
                    }
                },
                resizedImageUri: {
                    readOnly: true,
                    serializedName: "resizedImageUri",
                    type: {
                        name: "String"
                    }
                },
                thumbnailUri: {
                    readOnly: true,
                    serializedName: "thumbnailUri",
                    type: {
                        name: "String"
                    }
                },
                originalImageUri: {
                    readOnly: true,
                    serializedName: "originalImageUri",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    nullable: true,
                    readOnly: true,
                    serializedName: "tags",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ImageTag"
                            }
                        }
                    }
                },
                regions: {
                    nullable: true,
                    readOnly: true,
                    serializedName: "regions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ImageRegion"
                            }
                        }
                    }
                },
                metadata: {
                    nullable: true,
                    readOnly: true,
                    serializedName: "metadata",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ImageCreateResult = {
        serializedName: "ImageCreateResult",
        type: {
            name: "Composite",
            className: "ImageCreateResult",
            modelProperties: {
                sourceUrl: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "sourceUrl",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                image: {
                    readOnly: true,
                    serializedName: "image",
                    type: {
                        name: "Composite",
                        className: "Image"
                    }
                }
            }
        }
    };
    var ImageCreateSummary = {
        serializedName: "ImageCreateSummary",
        type: {
            name: "Composite",
            className: "ImageCreateSummary",
            modelProperties: {
                isBatchSuccessful: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "isBatchSuccessful",
                    type: {
                        name: "Boolean"
                    }
                },
                images: {
                    readOnly: true,
                    serializedName: "images",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ImageCreateResult"
                            }
                        }
                    }
                }
            }
        }
    };
    var Region = {
        serializedName: "Region",
        type: {
            name: "Composite",
            className: "Region",
            modelProperties: {
                tagId: {
                    required: true,
                    nullable: false,
                    serializedName: "tagId",
                    type: {
                        name: "Uuid"
                    }
                },
                left: {
                    required: true,
                    nullable: false,
                    serializedName: "left",
                    type: {
                        name: "Number"
                    }
                },
                top: {
                    required: true,
                    nullable: false,
                    serializedName: "top",
                    type: {
                        name: "Number"
                    }
                },
                width: {
                    required: true,
                    nullable: false,
                    serializedName: "width",
                    type: {
                        name: "Number"
                    }
                },
                height: {
                    required: true,
                    nullable: false,
                    serializedName: "height",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ImageFileCreateEntry = {
        serializedName: "ImageFileCreateEntry",
        type: {
            name: "Composite",
            className: "ImageFileCreateEntry",
            modelProperties: {
                name: {
                    nullable: false,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                contents: {
                    serializedName: "contents",
                    type: {
                        name: "ByteArray"
                    }
                },
                tagIds: {
                    serializedName: "tagIds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Uuid"
                            }
                        }
                    }
                },
                regions: {
                    serializedName: "regions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Region"
                            }
                        }
                    }
                }
            }
        }
    };
    var ImageFileCreateBatch = {
        serializedName: "ImageFileCreateBatch",
        type: {
            name: "Composite",
            className: "ImageFileCreateBatch",
            modelProperties: {
                images: {
                    serializedName: "images",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ImageFileCreateEntry"
                            }
                        }
                    }
                },
                tagIds: {
                    serializedName: "tagIds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Uuid"
                            }
                        }
                    }
                },
                metadata: {
                    nullable: true,
                    serializedName: "metadata",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ImageIdCreateEntry = {
        serializedName: "ImageIdCreateEntry",
        type: {
            name: "Composite",
            className: "ImageIdCreateEntry",
            modelProperties: {
                id: {
                    nullable: false,
                    serializedName: "id",
                    type: {
                        name: "Uuid"
                    }
                },
                tagIds: {
                    serializedName: "tagIds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Uuid"
                            }
                        }
                    }
                },
                regions: {
                    serializedName: "regions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Region"
                            }
                        }
                    }
                }
            }
        }
    };
    var ImageIdCreateBatch = {
        serializedName: "ImageIdCreateBatch",
        type: {
            name: "Composite",
            className: "ImageIdCreateBatch",
            modelProperties: {
                images: {
                    serializedName: "images",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ImageIdCreateEntry"
                            }
                        }
                    }
                },
                tagIds: {
                    serializedName: "tagIds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Uuid"
                            }
                        }
                    }
                },
                metadata: {
                    nullable: true,
                    serializedName: "metadata",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ImageMetadataUpdateEntry = {
        serializedName: "ImageMetadataUpdateEntry",
        type: {
            name: "Composite",
            className: "ImageMetadataUpdateEntry",
            modelProperties: {
                imageId: {
                    nullable: false,
                    serializedName: "imageId",
                    type: {
                        name: "Uuid"
                    }
                },
                status: {
                    nullable: false,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                metadata: {
                    nullable: true,
                    serializedName: "metadata",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var ImageMetadataUpdateSummary = {
        serializedName: "ImageMetadataUpdateSummary",
        type: {
            name: "Composite",
            className: "ImageMetadataUpdateSummary",
            modelProperties: {
                isBatchSuccessful: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "isBatchSuccessful",
                    type: {
                        name: "Boolean"
                    }
                },
                images: {
                    readOnly: true,
                    serializedName: "images",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ImageMetadataUpdateEntry"
                            }
                        }
                    }
                }
            }
        }
    };
    var Prediction = {
        serializedName: "Prediction",
        type: {
            name: "Composite",
            className: "Prediction",
            modelProperties: {
                probability: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "probability",
                    type: {
                        name: "Number"
                    }
                },
                tagId: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "tagId",
                    type: {
                        name: "Uuid"
                    }
                },
                tagName: {
                    nullable: true,
                    readOnly: true,
                    serializedName: "tagName",
                    type: {
                        name: "String"
                    }
                },
                boundingBox: {
                    nullable: true,
                    readOnly: true,
                    serializedName: "boundingBox",
                    type: {
                        name: "Composite",
                        className: "BoundingBox"
                    }
                },
                tagType: {
                    nullable: true,
                    readOnly: true,
                    serializedName: "tagType",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ImagePerformance = {
        serializedName: "ImagePerformance",
        type: {
            name: "Composite",
            className: "ImagePerformance",
            modelProperties: {
                predictions: {
                    nullable: true,
                    readOnly: true,
                    serializedName: "predictions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Prediction"
                            }
                        }
                    }
                },
                id: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "Uuid"
                    }
                },
                created: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "created",
                    type: {
                        name: "DateTime"
                    }
                },
                width: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "width",
                    type: {
                        name: "Number"
                    }
                },
                height: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "height",
                    type: {
                        name: "Number"
                    }
                },
                imageUri: {
                    readOnly: true,
                    serializedName: "imageUri",
                    type: {
                        name: "String"
                    }
                },
                thumbnailUri: {
                    readOnly: true,
                    serializedName: "thumbnailUri",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    nullable: true,
                    readOnly: true,
                    serializedName: "tags",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ImageTag"
                            }
                        }
                    }
                },
                regions: {
                    nullable: true,
                    readOnly: true,
                    serializedName: "regions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ImageRegion"
                            }
                        }
                    }
                }
            }
        }
    };
    var ImagePrediction = {
        serializedName: "ImagePrediction",
        type: {
            name: "Composite",
            className: "ImagePrediction",
            modelProperties: {
                id: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "Uuid"
                    }
                },
                project: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "project",
                    type: {
                        name: "Uuid"
                    }
                },
                iteration: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "iteration",
                    type: {
                        name: "Uuid"
                    }
                },
                created: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "created",
                    type: {
                        name: "DateTime"
                    }
                },
                predictions: {
                    readOnly: true,
                    serializedName: "predictions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Prediction"
                            }
                        }
                    }
                }
            }
        }
    };
    var ImageProcessingSettings = {
        serializedName: "ImageProcessingSettings",
        type: {
            name: "Composite",
            className: "ImageProcessingSettings",
            modelProperties: {
                augmentationMethods: {
                    nullable: true,
                    serializedName: "augmentationMethods",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Boolean"
                            }
                        }
                    }
                }
            }
        }
    };
    var ImageRegionCreateEntry = {
        serializedName: "ImageRegionCreateEntry",
        type: {
            name: "Composite",
            className: "ImageRegionCreateEntry",
            modelProperties: {
                imageId: {
                    required: true,
                    nullable: false,
                    serializedName: "imageId",
                    type: {
                        name: "Uuid"
                    }
                },
                tagId: {
                    required: true,
                    nullable: false,
                    serializedName: "tagId",
                    type: {
                        name: "Uuid"
                    }
                },
                left: {
                    required: true,
                    nullable: false,
                    serializedName: "left",
                    type: {
                        name: "Number"
                    }
                },
                top: {
                    required: true,
                    nullable: false,
                    serializedName: "top",
                    type: {
                        name: "Number"
                    }
                },
                width: {
                    required: true,
                    nullable: false,
                    serializedName: "width",
                    type: {
                        name: "Number"
                    }
                },
                height: {
                    required: true,
                    nullable: false,
                    serializedName: "height",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ImageRegionCreateBatch = {
        serializedName: "ImageRegionCreateBatch",
        type: {
            name: "Composite",
            className: "ImageRegionCreateBatch",
            modelProperties: {
                regions: {
                    serializedName: "regions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ImageRegionCreateEntry"
                            }
                        }
                    }
                }
            }
        }
    };
    var ImageRegionCreateResult = {
        serializedName: "ImageRegionCreateResult",
        type: {
            name: "Composite",
            className: "ImageRegionCreateResult",
            modelProperties: {
                imageId: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "imageId",
                    type: {
                        name: "Uuid"
                    }
                },
                regionId: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "regionId",
                    type: {
                        name: "Uuid"
                    }
                },
                tagName: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "tagName",
                    type: {
                        name: "String"
                    }
                },
                created: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "created",
                    type: {
                        name: "DateTime"
                    }
                },
                tagId: {
                    required: true,
                    nullable: false,
                    serializedName: "tagId",
                    type: {
                        name: "Uuid"
                    }
                },
                left: {
                    required: true,
                    nullable: false,
                    serializedName: "left",
                    type: {
                        name: "Number"
                    }
                },
                top: {
                    required: true,
                    nullable: false,
                    serializedName: "top",
                    type: {
                        name: "Number"
                    }
                },
                width: {
                    required: true,
                    nullable: false,
                    serializedName: "width",
                    type: {
                        name: "Number"
                    }
                },
                height: {
                    required: true,
                    nullable: false,
                    serializedName: "height",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var ImageRegionCreateSummary = {
        serializedName: "ImageRegionCreateSummary",
        type: {
            name: "Composite",
            className: "ImageRegionCreateSummary",
            modelProperties: {
                created: {
                    nullable: true,
                    serializedName: "created",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ImageRegionCreateResult"
                            }
                        }
                    }
                },
                duplicated: {
                    nullable: true,
                    serializedName: "duplicated",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ImageRegionCreateEntry"
                            }
                        }
                    }
                },
                exceeded: {
                    nullable: true,
                    serializedName: "exceeded",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ImageRegionCreateEntry"
                            }
                        }
                    }
                }
            }
        }
    };
    var RegionProposal = {
        serializedName: "RegionProposal",
        type: {
            name: "Composite",
            className: "RegionProposal",
            modelProperties: {
                confidence: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "confidence",
                    type: {
                        name: "Number"
                    }
                },
                boundingBox: {
                    readOnly: true,
                    serializedName: "boundingBox",
                    type: {
                        name: "Composite",
                        className: "BoundingBox"
                    }
                }
            }
        }
    };
    var ImageRegionProposal = {
        serializedName: "ImageRegionProposal",
        type: {
            name: "Composite",
            className: "ImageRegionProposal",
            modelProperties: {
                projectId: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "projectId",
                    type: {
                        name: "Uuid"
                    }
                },
                imageId: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "imageId",
                    type: {
                        name: "Uuid"
                    }
                },
                proposals: {
                    readOnly: true,
                    serializedName: "proposals",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "RegionProposal"
                            }
                        }
                    }
                }
            }
        }
    };
    var ImageTagCreateEntry = {
        serializedName: "ImageTagCreateEntry",
        type: {
            name: "Composite",
            className: "ImageTagCreateEntry",
            modelProperties: {
                imageId: {
                    nullable: false,
                    serializedName: "imageId",
                    type: {
                        name: "Uuid"
                    }
                },
                tagId: {
                    nullable: false,
                    serializedName: "tagId",
                    type: {
                        name: "Uuid"
                    }
                }
            }
        }
    };
    var ImageTagCreateBatch = {
        serializedName: "ImageTagCreateBatch",
        type: {
            name: "Composite",
            className: "ImageTagCreateBatch",
            modelProperties: {
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ImageTagCreateEntry"
                            }
                        }
                    }
                }
            }
        }
    };
    var ImageTagCreateSummary = {
        serializedName: "ImageTagCreateSummary",
        type: {
            name: "Composite",
            className: "ImageTagCreateSummary",
            modelProperties: {
                created: {
                    nullable: true,
                    serializedName: "created",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ImageTagCreateEntry"
                            }
                        }
                    }
                },
                duplicated: {
                    nullable: true,
                    serializedName: "duplicated",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ImageTagCreateEntry"
                            }
                        }
                    }
                },
                exceeded: {
                    nullable: true,
                    serializedName: "exceeded",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ImageTagCreateEntry"
                            }
                        }
                    }
                }
            }
        }
    };
    var ImageUrl = {
        serializedName: "ImageUrl",
        type: {
            name: "Composite",
            className: "ImageUrl",
            modelProperties: {
                url: {
                    required: true,
                    nullable: false,
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ImageUrlCreateEntry = {
        serializedName: "ImageUrlCreateEntry",
        type: {
            name: "Composite",
            className: "ImageUrlCreateEntry",
            modelProperties: {
                url: {
                    required: true,
                    nullable: false,
                    serializedName: "url",
                    type: {
                        name: "String"
                    }
                },
                tagIds: {
                    serializedName: "tagIds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Uuid"
                            }
                        }
                    }
                },
                regions: {
                    serializedName: "regions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Region"
                            }
                        }
                    }
                }
            }
        }
    };
    var ImageUrlCreateBatch = {
        serializedName: "ImageUrlCreateBatch",
        type: {
            name: "Composite",
            className: "ImageUrlCreateBatch",
            modelProperties: {
                images: {
                    serializedName: "images",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ImageUrlCreateEntry"
                            }
                        }
                    }
                },
                tagIds: {
                    serializedName: "tagIds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Uuid"
                            }
                        }
                    }
                },
                metadata: {
                    nullable: true,
                    serializedName: "metadata",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                }
            }
        }
    };
    var Iteration = {
        serializedName: "Iteration",
        type: {
            name: "Composite",
            className: "Iteration",
            modelProperties: {
                id: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "Uuid"
                    }
                },
                name: {
                    required: true,
                    nullable: false,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                status: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                },
                created: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "created",
                    type: {
                        name: "DateTime"
                    }
                },
                lastModified: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "lastModified",
                    type: {
                        name: "DateTime"
                    }
                },
                trainedAt: {
                    nullable: true,
                    readOnly: true,
                    serializedName: "trainedAt",
                    type: {
                        name: "DateTime"
                    }
                },
                projectId: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "projectId",
                    type: {
                        name: "Uuid"
                    }
                },
                exportable: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "exportable",
                    type: {
                        name: "Boolean"
                    }
                },
                exportableTo: {
                    readOnly: true,
                    serializedName: "exportableTo",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                domainId: {
                    nullable: true,
                    readOnly: true,
                    serializedName: "domainId",
                    type: {
                        name: "Uuid"
                    }
                },
                classificationType: {
                    nullable: true,
                    readOnly: true,
                    serializedName: "classificationType",
                    type: {
                        name: "String"
                    }
                },
                trainingType: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "trainingType",
                    type: {
                        name: "String"
                    }
                },
                reservedBudgetInHours: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "reservedBudgetInHours",
                    type: {
                        name: "Number"
                    }
                },
                trainingTimeInMinutes: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "trainingTimeInMinutes",
                    type: {
                        name: "Number"
                    }
                },
                publishName: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "publishName",
                    type: {
                        name: "String"
                    }
                },
                originalPublishResourceId: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "originalPublishResourceId",
                    type: {
                        name: "String"
                    }
                },
                customBaseModelInfo: {
                    readOnly: true,
                    serializedName: "customBaseModelInfo",
                    type: {
                        name: "Composite",
                        className: "CustomBaseModelInfo"
                    }
                },
                trainingErrorDetails: {
                    readOnly: true,
                    serializedName: "trainingErrorDetails",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var TagPerformance = {
        serializedName: "TagPerformance",
        type: {
            name: "Composite",
            className: "TagPerformance",
            modelProperties: {
                id: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "Uuid"
                    }
                },
                name: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                precision: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "precision",
                    type: {
                        name: "Number"
                    }
                },
                precisionStdDeviation: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "precisionStdDeviation",
                    type: {
                        name: "Number"
                    }
                },
                recall: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "recall",
                    type: {
                        name: "Number"
                    }
                },
                recallStdDeviation: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "recallStdDeviation",
                    type: {
                        name: "Number"
                    }
                },
                averagePrecision: {
                    nullable: true,
                    readOnly: true,
                    serializedName: "averagePrecision",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var IterationPerformance = {
        serializedName: "IterationPerformance",
        type: {
            name: "Composite",
            className: "IterationPerformance",
            modelProperties: {
                perTagPerformance: {
                    readOnly: true,
                    serializedName: "perTagPerformance",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "TagPerformance"
                            }
                        }
                    }
                },
                precision: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "precision",
                    type: {
                        name: "Number"
                    }
                },
                precisionStdDeviation: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "precisionStdDeviation",
                    type: {
                        name: "Number"
                    }
                },
                recall: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "recall",
                    type: {
                        name: "Number"
                    }
                },
                recallStdDeviation: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "recallStdDeviation",
                    type: {
                        name: "Number"
                    }
                },
                averagePrecision: {
                    nullable: true,
                    readOnly: true,
                    serializedName: "averagePrecision",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var PredictionQueryTag = {
        serializedName: "PredictionQueryTag",
        type: {
            name: "Composite",
            className: "PredictionQueryTag",
            modelProperties: {
                id: {
                    nullable: false,
                    serializedName: "id",
                    type: {
                        name: "Uuid"
                    }
                },
                minThreshold: {
                    nullable: false,
                    serializedName: "minThreshold",
                    type: {
                        name: "Number"
                    }
                },
                maxThreshold: {
                    nullable: false,
                    serializedName: "maxThreshold",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var PredictionQueryToken = {
        serializedName: "PredictionQueryToken",
        type: {
            name: "Composite",
            className: "PredictionQueryToken",
            modelProperties: {
                session: {
                    nullable: false,
                    serializedName: "session",
                    type: {
                        name: "String"
                    }
                },
                continuation: {
                    nullable: false,
                    serializedName: "continuation",
                    type: {
                        name: "String"
                    }
                },
                maxCount: {
                    nullable: false,
                    serializedName: "maxCount",
                    type: {
                        name: "Number"
                    }
                },
                orderBy: {
                    nullable: false,
                    serializedName: "orderBy",
                    type: {
                        name: "String"
                    }
                },
                tags: {
                    serializedName: "tags",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "PredictionQueryTag"
                            }
                        }
                    }
                },
                iterationId: {
                    nullable: true,
                    serializedName: "iterationId",
                    type: {
                        name: "Uuid"
                    }
                },
                startTime: {
                    nullable: true,
                    serializedName: "startTime",
                    type: {
                        name: "DateTime"
                    }
                },
                endTime: {
                    nullable: true,
                    serializedName: "endTime",
                    type: {
                        name: "DateTime"
                    }
                },
                application: {
                    nullable: false,
                    serializedName: "application",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StoredImagePrediction = {
        serializedName: "StoredImagePrediction",
        type: {
            name: "Composite",
            className: "StoredImagePrediction",
            modelProperties: {
                resizedImageUri: {
                    readOnly: true,
                    serializedName: "resizedImageUri",
                    type: {
                        name: "String"
                    }
                },
                thumbnailUri: {
                    readOnly: true,
                    serializedName: "thumbnailUri",
                    type: {
                        name: "String"
                    }
                },
                originalImageUri: {
                    readOnly: true,
                    serializedName: "originalImageUri",
                    type: {
                        name: "String"
                    }
                },
                domain: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "domain",
                    type: {
                        name: "Uuid"
                    }
                },
                id: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "Uuid"
                    }
                },
                project: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "project",
                    type: {
                        name: "Uuid"
                    }
                },
                iteration: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "iteration",
                    type: {
                        name: "Uuid"
                    }
                },
                created: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "created",
                    type: {
                        name: "DateTime"
                    }
                },
                predictions: {
                    readOnly: true,
                    serializedName: "predictions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Prediction"
                            }
                        }
                    }
                }
            }
        }
    };
    var PredictionQueryResult = {
        serializedName: "PredictionQueryResult",
        type: {
            name: "Composite",
            className: "PredictionQueryResult",
            modelProperties: {
                token: {
                    serializedName: "token",
                    type: {
                        name: "Composite",
                        className: "PredictionQueryToken"
                    }
                },
                results: {
                    readOnly: true,
                    serializedName: "results",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StoredImagePrediction"
                            }
                        }
                    }
                }
            }
        }
    };
    var ProjectSettings = {
        serializedName: "ProjectSettings",
        type: {
            name: "Composite",
            className: "ProjectSettings",
            modelProperties: {
                domainId: {
                    nullable: false,
                    serializedName: "domainId",
                    type: {
                        name: "Uuid"
                    }
                },
                classificationType: {
                    nullable: true,
                    serializedName: "classificationType",
                    type: {
                        name: "String"
                    }
                },
                targetExportPlatforms: {
                    serializedName: "targetExportPlatforms",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "String"
                            }
                        }
                    }
                },
                useNegativeSet: {
                    nullable: true,
                    readOnly: true,
                    serializedName: "useNegativeSet",
                    type: {
                        name: "Boolean"
                    }
                },
                detectionParameters: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "detectionParameters",
                    type: {
                        name: "String"
                    }
                },
                imageProcessingSettings: {
                    serializedName: "imageProcessingSettings",
                    type: {
                        name: "Composite",
                        className: "ImageProcessingSettings"
                    }
                },
                exportModelContainerUri: {
                    nullable: true,
                    readOnly: true,
                    serializedName: "exportModelContainerUri",
                    type: {
                        name: "String"
                    }
                },
                notificationQueueUri: {
                    nullable: true,
                    readOnly: true,
                    serializedName: "notificationQueueUri",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var Project = {
        serializedName: "Project",
        type: {
            name: "Composite",
            className: "Project",
            modelProperties: {
                id: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "Uuid"
                    }
                },
                name: {
                    required: true,
                    nullable: false,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    required: true,
                    nullable: true,
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                settings: {
                    required: true,
                    serializedName: "settings",
                    type: {
                        name: "Composite",
                        className: "ProjectSettings"
                    }
                },
                created: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "created",
                    type: {
                        name: "DateTime"
                    }
                },
                lastModified: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "lastModified",
                    type: {
                        name: "DateTime"
                    }
                },
                thumbnailUri: {
                    readOnly: true,
                    serializedName: "thumbnailUri",
                    type: {
                        name: "String"
                    }
                },
                drModeEnabled: {
                    nullable: true,
                    readOnly: true,
                    serializedName: "drModeEnabled",
                    type: {
                        name: "Boolean"
                    }
                },
                status: {
                    nullable: false,
                    serializedName: "status",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var ProjectExport = {
        serializedName: "ProjectExport",
        type: {
            name: "Composite",
            className: "ProjectExport",
            modelProperties: {
                iterationCount: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "iterationCount",
                    type: {
                        name: "Number"
                    }
                },
                imageCount: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "imageCount",
                    type: {
                        name: "Number"
                    }
                },
                tagCount: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "tagCount",
                    type: {
                        name: "Number"
                    }
                },
                regionCount: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "regionCount",
                    type: {
                        name: "Number"
                    }
                },
                estimatedImportTimeInMS: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "estimatedImportTimeInMS",
                    type: {
                        name: "Number"
                    }
                },
                token: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "token",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var StoredSuggestedTagAndRegion = {
        serializedName: "StoredSuggestedTagAndRegion",
        type: {
            name: "Composite",
            className: "StoredSuggestedTagAndRegion",
            modelProperties: {
                width: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "width",
                    type: {
                        name: "Number"
                    }
                },
                height: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "height",
                    type: {
                        name: "Number"
                    }
                },
                resizedImageUri: {
                    readOnly: true,
                    serializedName: "resizedImageUri",
                    type: {
                        name: "String"
                    }
                },
                thumbnailUri: {
                    readOnly: true,
                    serializedName: "thumbnailUri",
                    type: {
                        name: "String"
                    }
                },
                originalImageUri: {
                    readOnly: true,
                    serializedName: "originalImageUri",
                    type: {
                        name: "String"
                    }
                },
                domain: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "domain",
                    type: {
                        name: "Uuid"
                    }
                },
                id: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "Uuid"
                    }
                },
                project: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "project",
                    type: {
                        name: "Uuid"
                    }
                },
                iteration: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "iteration",
                    type: {
                        name: "Uuid"
                    }
                },
                created: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "created",
                    type: {
                        name: "DateTime"
                    }
                },
                predictions: {
                    readOnly: true,
                    serializedName: "predictions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Prediction"
                            }
                        }
                    }
                },
                predictionUncertainty: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "predictionUncertainty",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var SuggestedTagAndRegion = {
        serializedName: "SuggestedTagAndRegion",
        type: {
            name: "Composite",
            className: "SuggestedTagAndRegion",
            modelProperties: {
                id: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "Uuid"
                    }
                },
                project: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "project",
                    type: {
                        name: "Uuid"
                    }
                },
                iteration: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "iteration",
                    type: {
                        name: "Uuid"
                    }
                },
                created: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "created",
                    type: {
                        name: "DateTime"
                    }
                },
                predictions: {
                    readOnly: true,
                    serializedName: "predictions",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Prediction"
                            }
                        }
                    }
                },
                predictionUncertainty: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "predictionUncertainty",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var SuggestedTagAndRegionQueryToken = {
        serializedName: "SuggestedTagAndRegionQueryToken",
        type: {
            name: "Composite",
            className: "SuggestedTagAndRegionQueryToken",
            modelProperties: {
                tagIds: {
                    serializedName: "tagIds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Uuid"
                            }
                        }
                    }
                },
                threshold: {
                    nullable: false,
                    serializedName: "threshold",
                    type: {
                        name: "Number"
                    }
                },
                session: {
                    nullable: false,
                    serializedName: "session",
                    type: {
                        name: "String"
                    }
                },
                continuation: {
                    nullable: false,
                    serializedName: "continuation",
                    type: {
                        name: "String"
                    }
                },
                maxCount: {
                    nullable: false,
                    serializedName: "maxCount",
                    type: {
                        name: "Number"
                    }
                },
                sortBy: {
                    nullable: false,
                    serializedName: "sortBy",
                    type: {
                        name: "String"
                    }
                }
            }
        }
    };
    var SuggestedTagAndRegionQuery = {
        serializedName: "SuggestedTagAndRegionQuery",
        type: {
            name: "Composite",
            className: "SuggestedTagAndRegionQuery",
            modelProperties: {
                token: {
                    serializedName: "token",
                    type: {
                        name: "Composite",
                        className: "SuggestedTagAndRegionQueryToken"
                    }
                },
                results: {
                    readOnly: true,
                    serializedName: "results",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "StoredSuggestedTagAndRegion"
                            }
                        }
                    }
                }
            }
        }
    };
    var Tag = {
        serializedName: "Tag",
        type: {
            name: "Composite",
            className: "Tag",
            modelProperties: {
                id: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "id",
                    type: {
                        name: "Uuid"
                    }
                },
                name: {
                    required: true,
                    nullable: false,
                    serializedName: "name",
                    type: {
                        name: "String"
                    }
                },
                description: {
                    required: true,
                    nullable: true,
                    serializedName: "description",
                    type: {
                        name: "String"
                    }
                },
                type: {
                    required: true,
                    nullable: false,
                    serializedName: "type",
                    type: {
                        name: "String"
                    }
                },
                imageCount: {
                    nullable: false,
                    readOnly: true,
                    serializedName: "imageCount",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var TagFilter = {
        serializedName: "TagFilter",
        type: {
            name: "Composite",
            className: "TagFilter",
            modelProperties: {
                tagIds: {
                    serializedName: "tagIds",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Uuid"
                            }
                        }
                    }
                },
                threshold: {
                    nullable: false,
                    serializedName: "threshold",
                    type: {
                        name: "Number"
                    }
                }
            }
        }
    };
    var TrainingParameters = {
        serializedName: "TrainingParameters",
        type: {
            name: "Composite",
            className: "TrainingParameters",
            modelProperties: {
                selectedTags: {
                    serializedName: "selectedTags",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Uuid"
                            }
                        }
                    }
                },
                customBaseModelInfo: {
                    serializedName: "customBaseModelInfo",
                    type: {
                        name: "Composite",
                        className: "CustomBaseModelInfo"
                    }
                }
            }
        }
    };

    var Mappers = /*#__PURE__*/Object.freeze({
        __proto__: null,
        BoundingBox: BoundingBox,
        CreateProjectOptions: CreateProjectOptions,
        CustomBaseModelInfo: CustomBaseModelInfo,
        CustomVisionError: CustomVisionError,
        ModelInformation: ModelInformation,
        Domain: Domain,
        ExportModel: ExportModel,
        ImageTag: ImageTag,
        ImageRegion: ImageRegion,
        Image: Image,
        ImageCreateResult: ImageCreateResult,
        ImageCreateSummary: ImageCreateSummary,
        Region: Region,
        ImageFileCreateEntry: ImageFileCreateEntry,
        ImageFileCreateBatch: ImageFileCreateBatch,
        ImageIdCreateEntry: ImageIdCreateEntry,
        ImageIdCreateBatch: ImageIdCreateBatch,
        ImageMetadataUpdateEntry: ImageMetadataUpdateEntry,
        ImageMetadataUpdateSummary: ImageMetadataUpdateSummary,
        Prediction: Prediction,
        ImagePerformance: ImagePerformance,
        ImagePrediction: ImagePrediction,
        ImageProcessingSettings: ImageProcessingSettings,
        ImageRegionCreateEntry: ImageRegionCreateEntry,
        ImageRegionCreateBatch: ImageRegionCreateBatch,
        ImageRegionCreateResult: ImageRegionCreateResult,
        ImageRegionCreateSummary: ImageRegionCreateSummary,
        RegionProposal: RegionProposal,
        ImageRegionProposal: ImageRegionProposal,
        ImageTagCreateEntry: ImageTagCreateEntry,
        ImageTagCreateBatch: ImageTagCreateBatch,
        ImageTagCreateSummary: ImageTagCreateSummary,
        ImageUrl: ImageUrl,
        ImageUrlCreateEntry: ImageUrlCreateEntry,
        ImageUrlCreateBatch: ImageUrlCreateBatch,
        Iteration: Iteration,
        TagPerformance: TagPerformance,
        IterationPerformance: IterationPerformance,
        PredictionQueryTag: PredictionQueryTag,
        PredictionQueryToken: PredictionQueryToken,
        StoredImagePrediction: StoredImagePrediction,
        PredictionQueryResult: PredictionQueryResult,
        ProjectSettings: ProjectSettings,
        Project: Project,
        ProjectExport: ProjectExport,
        StoredSuggestedTagAndRegion: StoredSuggestedTagAndRegion,
        SuggestedTagAndRegion: SuggestedTagAndRegion,
        SuggestedTagAndRegionQueryToken: SuggestedTagAndRegionQueryToken,
        SuggestedTagAndRegionQuery: SuggestedTagAndRegionQuery,
        Tag: Tag,
        TagFilter: TagFilter,
        TrainingParameters: TrainingParameters
    });

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var allImages = {
        parameterPath: [
            "options",
            "allImages"
        ],
        mapper: {
            serializedName: "allImages",
            type: {
                name: "Boolean"
            }
        }
    };
    var allIterations = {
        parameterPath: [
            "options",
            "allIterations"
        ],
        mapper: {
            serializedName: "allIterations",
            type: {
                name: "Boolean"
            }
        }
    };
    var classificationType = {
        parameterPath: [
            "options",
            "classificationType"
        ],
        mapper: {
            serializedName: "classificationType",
            type: {
                name: "String"
            }
        }
    };
    var description = {
        parameterPath: [
            "options",
            "description"
        ],
        mapper: {
            serializedName: "description",
            type: {
                name: "String"
            }
        }
    };
    var domainId0 = {
        parameterPath: "domainId",
        mapper: {
            required: true,
            serializedName: "domainId",
            type: {
                name: "Uuid"
            }
        }
    };
    var domainId1 = {
        parameterPath: [
            "options",
            "domainId"
        ],
        mapper: {
            serializedName: "domainId",
            type: {
                name: "Uuid"
            }
        }
    };
    var endpoint = {
        parameterPath: "endpoint",
        mapper: {
            required: true,
            serializedName: "Endpoint",
            defaultValue: '',
            type: {
                name: "String"
            }
        },
        skipEncoding: true
    };
    var filter = {
        parameterPath: [
            "options",
            "filter"
        ],
        mapper: {
            serializedName: "$filter",
            type: {
                name: "String"
            }
        }
    };
    var flavor = {
        parameterPath: [
            "options",
            "flavor"
        ],
        mapper: {
            serializedName: "flavor",
            type: {
                name: "String"
            }
        }
    };
    var forceTrain = {
        parameterPath: [
            "options",
            "forceTrain"
        ],
        mapper: {
            serializedName: "forceTrain",
            defaultValue: false,
            type: {
                name: "Boolean"
            }
        }
    };
    var ids = {
        parameterPath: "ids",
        mapper: {
            required: true,
            serializedName: "ids",
            constraints: {
                MaxItems: 64,
                MinItems: 0
            },
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Uuid"
                    }
                }
            }
        },
        collectionFormat: msRest.QueryCollectionFormat.Csv
    };
    var imageData = {
        parameterPath: "imageData",
        mapper: {
            required: true,
            serializedName: "imageData",
            type: {
                name: "Stream"
            }
        }
    };
    var imageId = {
        parameterPath: "imageId",
        mapper: {
            required: true,
            serializedName: "imageId",
            type: {
                name: "Uuid"
            }
        }
    };
    var imageIds0 = {
        parameterPath: [
            "options",
            "imageIds"
        ],
        mapper: {
            serializedName: "imageIds",
            constraints: {
                MaxItems: 256,
                MinItems: 0
            },
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Uuid"
                    }
                }
            }
        },
        collectionFormat: msRest.QueryCollectionFormat.Csv
    };
    var imageIds1 = {
        parameterPath: "imageIds",
        mapper: {
            required: true,
            serializedName: "imageIds",
            constraints: {
                MaxItems: 256,
                MinItems: 0
            },
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Uuid"
                    }
                }
            }
        },
        collectionFormat: msRest.QueryCollectionFormat.Csv
    };
    var imageIds2 = {
        parameterPath: "imageIds",
        mapper: {
            required: true,
            serializedName: "imageIds",
            constraints: {
                MaxItems: 64,
                MinItems: 0
            },
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Uuid"
                    }
                }
            }
        },
        collectionFormat: msRest.QueryCollectionFormat.Csv
    };
    var iterationId0 = {
        parameterPath: [
            "options",
            "iterationId"
        ],
        mapper: {
            serializedName: "iterationId",
            type: {
                name: "Uuid"
            }
        }
    };
    var iterationId1 = {
        parameterPath: "iterationId",
        mapper: {
            required: true,
            serializedName: "iterationId",
            type: {
                name: "Uuid"
            }
        }
    };
    var name0 = {
        parameterPath: "name",
        mapper: {
            required: true,
            serializedName: "name",
            type: {
                name: "String"
            }
        }
    };
    var name1 = {
        parameterPath: [
            "options",
            "name"
        ],
        mapper: {
            serializedName: "name",
            type: {
                name: "String"
            }
        }
    };
    var notificationEmailAddress = {
        parameterPath: [
            "options",
            "notificationEmailAddress"
        ],
        mapper: {
            serializedName: "notificationEmailAddress",
            type: {
                name: "String"
            }
        }
    };
    var orderBy = {
        parameterPath: [
            "options",
            "orderBy"
        ],
        mapper: {
            serializedName: "orderBy",
            type: {
                name: "String"
            }
        }
    };
    var overlapThreshold = {
        parameterPath: [
            "options",
            "overlapThreshold"
        ],
        mapper: {
            serializedName: "overlapThreshold",
            type: {
                name: "Number"
            }
        }
    };
    var overwrite = {
        parameterPath: [
            "options",
            "overwrite"
        ],
        mapper: {
            serializedName: "overwrite",
            type: {
                name: "Boolean"
            }
        }
    };
    var path = {
        parameterPath: "path",
        mapper: {
            required: true,
            serializedName: "path",
            type: {
                name: "String"
            }
        }
    };
    var platform = {
        parameterPath: "platform",
        mapper: {
            required: true,
            serializedName: "platform",
            type: {
                name: "String"
            }
        }
    };
    var predictionId = {
        parameterPath: "predictionId",
        mapper: {
            required: true,
            serializedName: "predictionId",
            type: {
                name: "String"
            }
        }
    };
    var projectId = {
        parameterPath: "projectId",
        mapper: {
            required: true,
            serializedName: "projectId",
            type: {
                name: "Uuid"
            }
        }
    };
    var publishName = {
        parameterPath: "publishName",
        mapper: {
            required: true,
            serializedName: "publishName",
            type: {
                name: "String"
            }
        }
    };
    var regionIds = {
        parameterPath: "regionIds",
        mapper: {
            required: true,
            serializedName: "regionIds",
            constraints: {
                MaxItems: 64,
                MinItems: 0
            },
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Uuid"
                    }
                }
            }
        },
        collectionFormat: msRest.QueryCollectionFormat.Csv
    };
    var reservedBudgetInHours = {
        parameterPath: [
            "options",
            "reservedBudgetInHours"
        ],
        mapper: {
            serializedName: "reservedBudgetInHours",
            defaultValue: 0,
            type: {
                name: "Number"
            }
        }
    };
    var skip = {
        parameterPath: [
            "options",
            "skip"
        ],
        mapper: {
            serializedName: "skip",
            defaultValue: 0,
            type: {
                name: "Number"
            }
        }
    };
    var store = {
        parameterPath: [
            "options",
            "store"
        ],
        mapper: {
            serializedName: "store",
            defaultValue: true,
            type: {
                name: "Boolean"
            }
        }
    };
    var taggingStatus = {
        parameterPath: [
            "options",
            "taggingStatus"
        ],
        mapper: {
            serializedName: "taggingStatus",
            type: {
                name: "String"
            }
        }
    };
    var tagId = {
        parameterPath: "tagId",
        mapper: {
            required: true,
            serializedName: "tagId",
            type: {
                name: "Uuid"
            }
        }
    };
    var tagIds0 = {
        parameterPath: [
            "options",
            "tagIds"
        ],
        mapper: {
            serializedName: "tagIds",
            constraints: {
                MaxItems: 20,
                MinItems: 0
            },
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Uuid"
                    }
                }
            }
        },
        collectionFormat: msRest.QueryCollectionFormat.Csv
    };
    var tagIds1 = {
        parameterPath: [
            "options",
            "tagIds"
        ],
        mapper: {
            serializedName: "tagIds",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Uuid"
                    }
                }
            }
        },
        collectionFormat: msRest.QueryCollectionFormat.Csv
    };
    var tagIds2 = {
        parameterPath: "tagIds",
        mapper: {
            required: true,
            serializedName: "tagIds",
            constraints: {
                MaxItems: 20,
                MinItems: 0
            },
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "Uuid"
                    }
                }
            }
        },
        collectionFormat: msRest.QueryCollectionFormat.Csv
    };
    var take = {
        parameterPath: [
            "options",
            "take"
        ],
        mapper: {
            serializedName: "take",
            defaultValue: 50,
            constraints: {
                InclusiveMaximum: 256,
                InclusiveMinimum: 0
            },
            type: {
                name: "Number"
            }
        }
    };
    var targetExportPlatforms = {
        parameterPath: [
            "options",
            "targetExportPlatforms"
        ],
        mapper: {
            serializedName: "targetExportPlatforms",
            type: {
                name: "Sequence",
                element: {
                    type: {
                        name: "String"
                    }
                }
            }
        },
        collectionFormat: msRest.QueryCollectionFormat.Csv
    };
    var threshold = {
        parameterPath: [
            "options",
            "threshold"
        ],
        mapper: {
            serializedName: "threshold",
            type: {
                name: "Number"
            }
        }
    };
    var token = {
        parameterPath: "token",
        mapper: {
            required: true,
            serializedName: "token",
            type: {
                name: "String"
            }
        }
    };
    var trainingType = {
        parameterPath: [
            "options",
            "trainingType"
        ],
        mapper: {
            serializedName: "trainingType",
            type: {
                name: "String"
            }
        }
    };
    var type = {
        parameterPath: [
            "options",
            "type"
        ],
        mapper: {
            serializedName: "type",
            type: {
                name: "String"
            }
        }
    };

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var packageName = "@azure/cognitiveservices-customvision-training";
    var packageVersion = "5.2.0";
    var TrainingAPIClientContext = /** @class */ (function (_super) {
        __extends(TrainingAPIClientContext, _super);
        /**
         * Initializes a new instance of the TrainingAPIClientContext class.
         * @param endpoint Supported Cognitive Services endpoints.
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param [options] The parameter options
         */
        function TrainingAPIClientContext(credentials, endpoint, options) {
            var _this = this;
            if (endpoint == undefined) {
                throw new Error("'endpoint' cannot be null.");
            }
            if (credentials == undefined) {
                throw new Error("'credentials' cannot be null.");
            }
            if (!options) {
                options = {};
            }
            if (!options.userAgent) {
                var defaultUserAgent = msRest.getDefaultUserAgentValue();
                options.userAgent = packageName + "/" + packageVersion + " " + defaultUserAgent;
            }
            _this = _super.call(this, credentials, options) || this;
            _this.baseUri = "{Endpoint}/customvision/v3.4-preview/training";
            _this.requestContentType = "application/json; charset=utf-8";
            _this.endpoint = endpoint;
            _this.credentials = credentials;
            return _this;
        }
        return TrainingAPIClientContext;
    }(msRest.ServiceClient));

    /*
     * Copyright (c) Microsoft Corporation.
     * Licensed under the MIT License.
     *
     * Code generated by Microsoft (R) AutoRest Code Generator.
     * Changes may cause incorrect behavior and will be lost if the code is
     * regenerated.
     */
    var TrainingAPIClient = /** @class */ (function (_super) {
        __extends(TrainingAPIClient, _super);
        /**
         * Initializes a new instance of the TrainingAPIClient class.
         * @param endpoint Supported Cognitive Services endpoints.
         * @param credentials Subscription credentials which uniquely identify client subscription.
         * @param [options] The parameter options
         */
        function TrainingAPIClient(credentials, endpoint, options) {
            return _super.call(this, credentials, endpoint, options) || this;
        }
        TrainingAPIClient.prototype.getDomains = function (options, callback) {
            return this.sendOperationRequest({
                options: options
            }, getDomainsOperationSpec, callback);
        };
        TrainingAPIClient.prototype.getDomain = function (domainId, options, callback) {
            return this.sendOperationRequest({
                domainId: domainId,
                options: options
            }, getDomainOperationSpec, callback);
        };
        TrainingAPIClient.prototype.getProjects = function (options, callback) {
            return this.sendOperationRequest({
                options: options
            }, getProjectsOperationSpec, callback);
        };
        TrainingAPIClient.prototype.createProject = function (name, options, callback) {
            return this.sendOperationRequest({
                name: name,
                options: options
            }, createProjectOperationSpec, callback);
        };
        TrainingAPIClient.prototype.getProject = function (projectId, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                options: options
            }, getProjectOperationSpec, callback);
        };
        TrainingAPIClient.prototype.deleteProject = function (projectId, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                options: options
            }, deleteProjectOperationSpec, callback);
        };
        TrainingAPIClient.prototype.updateProject = function (projectId, updatedProject, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                updatedProject: updatedProject,
                options: options
            }, updateProjectOperationSpec, callback);
        };
        TrainingAPIClient.prototype.getArtifact = function (projectId, path, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                path: path,
                options: options
            }, getArtifactOperationSpec, callback);
        };
        TrainingAPIClient.prototype.exportProject = function (projectId, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                options: options
            }, exportProjectOperationSpec, callback);
        };
        TrainingAPIClient.prototype.getImages = function (projectId, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                options: options
            }, getImagesOperationSpec, callback);
        };
        TrainingAPIClient.prototype.createImagesFromData = function (projectId, imageData, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                imageData: imageData,
                options: options
            }, createImagesFromDataOperationSpec, callback);
        };
        TrainingAPIClient.prototype.deleteImages = function (projectId, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                options: options
            }, deleteImagesOperationSpec, callback);
        };
        TrainingAPIClient.prototype.getImageRegionProposals = function (projectId, imageId, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                imageId: imageId,
                options: options
            }, getImageRegionProposalsOperationSpec, callback);
        };
        TrainingAPIClient.prototype.getImageCount = function (projectId, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                options: options
            }, getImageCountOperationSpec, callback);
        };
        TrainingAPIClient.prototype.createImagesFromFiles = function (projectId, batch, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                batch: batch,
                options: options
            }, createImagesFromFilesOperationSpec, callback);
        };
        TrainingAPIClient.prototype.getImagesByIds = function (projectId, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                options: options
            }, getImagesByIdsOperationSpec, callback);
        };
        TrainingAPIClient.prototype.updateImageMetadata = function (projectId, imageIds, metadata, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                imageIds: imageIds,
                metadata: metadata,
                options: options
            }, updateImageMetadataOperationSpec, callback);
        };
        TrainingAPIClient.prototype.createImagesFromPredictions = function (projectId, batch, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                batch: batch,
                options: options
            }, createImagesFromPredictionsOperationSpec, callback);
        };
        TrainingAPIClient.prototype.createImageRegions = function (projectId, batch, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                batch: batch,
                options: options
            }, createImageRegionsOperationSpec, callback);
        };
        TrainingAPIClient.prototype.deleteImageRegions = function (projectId, regionIds, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                regionIds: regionIds,
                options: options
            }, deleteImageRegionsOperationSpec, callback);
        };
        TrainingAPIClient.prototype.querySuggestedImages = function (projectId, iterationId, query, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                iterationId: iterationId,
                query: query,
                options: options
            }, querySuggestedImagesOperationSpec, callback);
        };
        TrainingAPIClient.prototype.querySuggestedImageCount = function (projectId, iterationId, query, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                iterationId: iterationId,
                query: query,
                options: options
            }, querySuggestedImageCountOperationSpec, callback);
        };
        TrainingAPIClient.prototype.getTaggedImages = function (projectId, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                options: options
            }, getTaggedImagesOperationSpec, callback);
        };
        TrainingAPIClient.prototype.getTaggedImageCount = function (projectId, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                options: options
            }, getTaggedImageCountOperationSpec, callback);
        };
        TrainingAPIClient.prototype.createImageTags = function (projectId, batch, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                batch: batch,
                options: options
            }, createImageTagsOperationSpec, callback);
        };
        TrainingAPIClient.prototype.deleteImageTags = function (projectId, imageIds, tagIds, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                imageIds: imageIds,
                tagIds: tagIds,
                options: options
            }, deleteImageTagsOperationSpec, callback);
        };
        TrainingAPIClient.prototype.getUntaggedImages = function (projectId, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                options: options
            }, getUntaggedImagesOperationSpec, callback);
        };
        TrainingAPIClient.prototype.getUntaggedImageCount = function (projectId, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                options: options
            }, getUntaggedImageCountOperationSpec, callback);
        };
        TrainingAPIClient.prototype.createImagesFromUrls = function (projectId, batch, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                batch: batch,
                options: options
            }, createImagesFromUrlsOperationSpec, callback);
        };
        TrainingAPIClient.prototype.getIterations = function (projectId, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                options: options
            }, getIterationsOperationSpec, callback);
        };
        TrainingAPIClient.prototype.getIteration = function (projectId, iterationId, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                iterationId: iterationId,
                options: options
            }, getIterationOperationSpec, callback);
        };
        TrainingAPIClient.prototype.deleteIteration = function (projectId, iterationId, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                iterationId: iterationId,
                options: options
            }, deleteIterationOperationSpec, callback);
        };
        TrainingAPIClient.prototype.updateIteration = function (projectId, iterationId, updatedIteration, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                iterationId: iterationId,
                updatedIteration: updatedIteration,
                options: options
            }, updateIterationOperationSpec, callback);
        };
        TrainingAPIClient.prototype.getExports = function (projectId, iterationId, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                iterationId: iterationId,
                options: options
            }, getExportsOperationSpec, callback);
        };
        TrainingAPIClient.prototype.exportIteration = function (projectId, iterationId, platform, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                iterationId: iterationId,
                platform: platform,
                options: options
            }, exportIterationOperationSpec, callback);
        };
        TrainingAPIClient.prototype.getIterationPerformance = function (projectId, iterationId, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                iterationId: iterationId,
                options: options
            }, getIterationPerformanceOperationSpec, callback);
        };
        TrainingAPIClient.prototype.getImagePerformances = function (projectId, iterationId, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                iterationId: iterationId,
                options: options
            }, getImagePerformancesOperationSpec, callback);
        };
        TrainingAPIClient.prototype.getImagePerformanceCount = function (projectId, iterationId, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                iterationId: iterationId,
                options: options
            }, getImagePerformanceCountOperationSpec, callback);
        };
        TrainingAPIClient.prototype.publishIteration = function (projectId, iterationId, publishName, predictionId, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                iterationId: iterationId,
                publishName: publishName,
                predictionId: predictionId,
                options: options
            }, publishIterationOperationSpec, callback);
        };
        TrainingAPIClient.prototype.unpublishIteration = function (projectId, iterationId, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                iterationId: iterationId,
                options: options
            }, unpublishIterationOperationSpec, callback);
        };
        TrainingAPIClient.prototype.deletePrediction = function (projectId, ids, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                ids: ids,
                options: options
            }, deletePredictionOperationSpec, callback);
        };
        TrainingAPIClient.prototype.queryPredictions = function (projectId, query, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                query: query,
                options: options
            }, queryPredictionsOperationSpec, callback);
        };
        TrainingAPIClient.prototype.quickTestImage = function (projectId, imageData, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                imageData: imageData,
                options: options
            }, quickTestImageOperationSpec, callback);
        };
        TrainingAPIClient.prototype.quickTestImageUrl = function (projectId, imageUrl, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                imageUrl: imageUrl,
                options: options
            }, quickTestImageUrlOperationSpec, callback);
        };
        TrainingAPIClient.prototype.getTags = function (projectId, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                options: options
            }, getTagsOperationSpec, callback);
        };
        TrainingAPIClient.prototype.createTag = function (projectId, name, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                name: name,
                options: options
            }, createTagOperationSpec, callback);
        };
        TrainingAPIClient.prototype.getTag = function (projectId, tagId, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                tagId: tagId,
                options: options
            }, getTagOperationSpec, callback);
        };
        TrainingAPIClient.prototype.deleteTag = function (projectId, tagId, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                tagId: tagId,
                options: options
            }, deleteTagOperationSpec, callback);
        };
        TrainingAPIClient.prototype.updateTag = function (projectId, tagId, updatedTag, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                tagId: tagId,
                updatedTag: updatedTag,
                options: options
            }, updateTagOperationSpec, callback);
        };
        TrainingAPIClient.prototype.suggestTagsAndRegions = function (projectId, iterationId, imageIds, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                iterationId: iterationId,
                imageIds: imageIds,
                options: options
            }, suggestTagsAndRegionsOperationSpec, callback);
        };
        TrainingAPIClient.prototype.trainProject = function (projectId, options, callback) {
            return this.sendOperationRequest({
                projectId: projectId,
                options: options
            }, trainProjectOperationSpec, callback);
        };
        TrainingAPIClient.prototype.importProject = function (token, options, callback) {
            return this.sendOperationRequest({
                token: token,
                options: options
            }, importProjectOperationSpec, callback);
        };
        return TrainingAPIClient;
    }(TrainingAPIClientContext));
    // Operation Specifications
    var serializer = new msRest.Serializer(Mappers);
    var getDomainsOperationSpec = {
        httpMethod: "GET",
        path: "domains",
        urlParameters: [
            endpoint
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Domain"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var getDomainOperationSpec = {
        httpMethod: "GET",
        path: "domains/{domainId}",
        urlParameters: [
            endpoint,
            domainId0
        ],
        responses: {
            200: {
                bodyMapper: Domain
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var getProjectsOperationSpec = {
        httpMethod: "GET",
        path: "projects",
        urlParameters: [
            endpoint
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Project"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var createProjectOperationSpec = {
        httpMethod: "POST",
        path: "projects",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            name0,
            description,
            domainId1,
            classificationType,
            targetExportPlatforms
        ],
        requestBody: {
            parameterPath: [
                "options",
                "options"
            ],
            mapper: CreateProjectOptions
        },
        responses: {
            200: {
                bodyMapper: Project
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var getProjectOperationSpec = {
        httpMethod: "GET",
        path: "projects/{projectId}",
        urlParameters: [
            endpoint,
            projectId
        ],
        responses: {
            200: {
                bodyMapper: Project
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var deleteProjectOperationSpec = {
        httpMethod: "DELETE",
        path: "projects/{projectId}",
        urlParameters: [
            endpoint,
            projectId
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var updateProjectOperationSpec = {
        httpMethod: "PATCH",
        path: "projects/{projectId}",
        urlParameters: [
            endpoint,
            projectId
        ],
        requestBody: {
            parameterPath: "updatedProject",
            mapper: __assign(__assign({}, Project), { required: true })
        },
        responses: {
            200: {
                bodyMapper: Project
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var getArtifactOperationSpec = {
        httpMethod: "GET",
        path: "projects/{projectId}/artifacts",
        urlParameters: [
            endpoint,
            projectId
        ],
        queryParameters: [
            path
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Stream"
                    }
                }
            },
            default: {}
        },
        serializer: serializer
    };
    var exportProjectOperationSpec = {
        httpMethod: "GET",
        path: "projects/{projectId}/export",
        urlParameters: [
            endpoint,
            projectId
        ],
        responses: {
            200: {
                bodyMapper: ProjectExport
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var getImagesOperationSpec = {
        httpMethod: "GET",
        path: "projects/{projectId}/images",
        urlParameters: [
            endpoint,
            projectId
        ],
        queryParameters: [
            iterationId0,
            tagIds0,
            taggingStatus,
            filter,
            orderBy,
            take,
            skip
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Image"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var createImagesFromDataOperationSpec = {
        httpMethod: "POST",
        path: "projects/{projectId}/images",
        urlParameters: [
            endpoint,
            projectId
        ],
        queryParameters: [
            tagIds0
        ],
        formDataParameters: [
            imageData
        ],
        contentType: "multipart/form-data",
        responses: {
            200: {
                bodyMapper: ImageCreateSummary
            },
            207: {
                bodyMapper: ImageCreateSummary
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var deleteImagesOperationSpec = {
        httpMethod: "DELETE",
        path: "projects/{projectId}/images",
        urlParameters: [
            endpoint,
            projectId
        ],
        queryParameters: [
            imageIds0,
            allImages,
            allIterations
        ],
        responses: {
            202: {},
            204: {},
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var getImageRegionProposalsOperationSpec = {
        httpMethod: "POST",
        path: "projects/{projectId}/images/{imageId}/regionproposals",
        urlParameters: [
            endpoint,
            projectId,
            imageId
        ],
        responses: {
            200: {
                bodyMapper: ImageRegionProposal
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var getImageCountOperationSpec = {
        httpMethod: "GET",
        path: "projects/{projectId}/images/count",
        urlParameters: [
            endpoint,
            projectId
        ],
        queryParameters: [
            iterationId0,
            taggingStatus,
            filter,
            tagIds1
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Number"
                    }
                }
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var createImagesFromFilesOperationSpec = {
        httpMethod: "POST",
        path: "projects/{projectId}/images/files",
        urlParameters: [
            endpoint,
            projectId
        ],
        requestBody: {
            parameterPath: "batch",
            mapper: __assign(__assign({}, ImageFileCreateBatch), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ImageCreateSummary
            },
            207: {
                bodyMapper: ImageCreateSummary
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var getImagesByIdsOperationSpec = {
        httpMethod: "GET",
        path: "projects/{projectId}/images/id",
        urlParameters: [
            endpoint,
            projectId
        ],
        queryParameters: [
            imageIds0,
            iterationId0
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Image"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var updateImageMetadataOperationSpec = {
        httpMethod: "POST",
        path: "projects/{projectId}/images/metadata",
        urlParameters: [
            endpoint,
            projectId
        ],
        queryParameters: [
            imageIds1
        ],
        requestBody: {
            parameterPath: "metadata",
            mapper: {
                required: true,
                serializedName: "metadata",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        },
        responses: {
            200: {
                bodyMapper: ImageMetadataUpdateSummary
            },
            207: {
                bodyMapper: ImageMetadataUpdateSummary
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var createImagesFromPredictionsOperationSpec = {
        httpMethod: "POST",
        path: "projects/{projectId}/images/predictions",
        urlParameters: [
            endpoint,
            projectId
        ],
        requestBody: {
            parameterPath: "batch",
            mapper: __assign(__assign({}, ImageIdCreateBatch), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ImageCreateSummary
            },
            207: {
                bodyMapper: ImageCreateSummary
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var createImageRegionsOperationSpec = {
        httpMethod: "POST",
        path: "projects/{projectId}/images/regions",
        urlParameters: [
            endpoint,
            projectId
        ],
        requestBody: {
            parameterPath: "batch",
            mapper: __assign(__assign({}, ImageRegionCreateBatch), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ImageRegionCreateSummary
            },
            207: {
                bodyMapper: ImageRegionCreateSummary
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var deleteImageRegionsOperationSpec = {
        httpMethod: "DELETE",
        path: "projects/{projectId}/images/regions",
        urlParameters: [
            endpoint,
            projectId
        ],
        queryParameters: [
            regionIds
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var querySuggestedImagesOperationSpec = {
        httpMethod: "POST",
        path: "projects/{projectId}/images/suggested",
        urlParameters: [
            endpoint,
            projectId
        ],
        queryParameters: [
            iterationId1
        ],
        requestBody: {
            parameterPath: "query",
            mapper: __assign(__assign({}, SuggestedTagAndRegionQueryToken), { required: true })
        },
        responses: {
            200: {
                bodyMapper: SuggestedTagAndRegionQuery
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var querySuggestedImageCountOperationSpec = {
        httpMethod: "POST",
        path: "projects/{projectId}/images/suggested/count",
        urlParameters: [
            endpoint,
            projectId
        ],
        queryParameters: [
            iterationId1
        ],
        requestBody: {
            parameterPath: "query",
            mapper: __assign(__assign({}, TagFilter), { required: true })
        },
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Dictionary",
                        value: {
                            type: {
                                name: "Number"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var getTaggedImagesOperationSpec = {
        httpMethod: "GET",
        path: "projects/{projectId}/images/tagged",
        urlParameters: [
            endpoint,
            projectId
        ],
        queryParameters: [
            iterationId0,
            tagIds0,
            orderBy,
            take,
            skip
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Image"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var getTaggedImageCountOperationSpec = {
        httpMethod: "GET",
        path: "projects/{projectId}/images/tagged/count",
        urlParameters: [
            endpoint,
            projectId
        ],
        queryParameters: [
            iterationId0,
            tagIds1
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Number"
                    }
                }
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var createImageTagsOperationSpec = {
        httpMethod: "POST",
        path: "projects/{projectId}/images/tags",
        urlParameters: [
            endpoint,
            projectId
        ],
        requestBody: {
            parameterPath: "batch",
            mapper: __assign(__assign({}, ImageTagCreateBatch), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ImageTagCreateSummary
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var deleteImageTagsOperationSpec = {
        httpMethod: "DELETE",
        path: "projects/{projectId}/images/tags",
        urlParameters: [
            endpoint,
            projectId
        ],
        queryParameters: [
            imageIds2,
            tagIds2
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var getUntaggedImagesOperationSpec = {
        httpMethod: "GET",
        path: "projects/{projectId}/images/untagged",
        urlParameters: [
            endpoint,
            projectId
        ],
        queryParameters: [
            iterationId0,
            orderBy,
            take,
            skip
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Image"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var getUntaggedImageCountOperationSpec = {
        httpMethod: "GET",
        path: "projects/{projectId}/images/untagged/count",
        urlParameters: [
            endpoint,
            projectId
        ],
        queryParameters: [
            iterationId0
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Number"
                    }
                }
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var createImagesFromUrlsOperationSpec = {
        httpMethod: "POST",
        path: "projects/{projectId}/images/urls",
        urlParameters: [
            endpoint,
            projectId
        ],
        requestBody: {
            parameterPath: "batch",
            mapper: __assign(__assign({}, ImageUrlCreateBatch), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ImageCreateSummary
            },
            207: {
                bodyMapper: ImageCreateSummary
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var getIterationsOperationSpec = {
        httpMethod: "GET",
        path: "projects/{projectId}/iterations",
        urlParameters: [
            endpoint,
            projectId
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Iteration"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var getIterationOperationSpec = {
        httpMethod: "GET",
        path: "projects/{projectId}/iterations/{iterationId}",
        urlParameters: [
            endpoint,
            projectId,
            iterationId1
        ],
        responses: {
            200: {
                bodyMapper: Iteration
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var deleteIterationOperationSpec = {
        httpMethod: "DELETE",
        path: "projects/{projectId}/iterations/{iterationId}",
        urlParameters: [
            endpoint,
            projectId,
            iterationId1
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var updateIterationOperationSpec = {
        httpMethod: "PATCH",
        path: "projects/{projectId}/iterations/{iterationId}",
        urlParameters: [
            endpoint,
            projectId,
            iterationId1
        ],
        requestBody: {
            parameterPath: "updatedIteration",
            mapper: __assign(__assign({}, Iteration), { required: true })
        },
        responses: {
            200: {
                bodyMapper: Iteration
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var getExportsOperationSpec = {
        httpMethod: "GET",
        path: "projects/{projectId}/iterations/{iterationId}/export",
        urlParameters: [
            endpoint,
            projectId,
            iterationId1
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ExportModel"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var exportIterationOperationSpec = {
        httpMethod: "POST",
        path: "projects/{projectId}/iterations/{iterationId}/export",
        urlParameters: [
            endpoint,
            projectId,
            iterationId1
        ],
        queryParameters: [
            platform,
            flavor
        ],
        responses: {
            200: {
                bodyMapper: ExportModel
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var getIterationPerformanceOperationSpec = {
        httpMethod: "GET",
        path: "projects/{projectId}/iterations/{iterationId}/performance",
        urlParameters: [
            endpoint,
            projectId,
            iterationId1
        ],
        queryParameters: [
            threshold,
            overlapThreshold
        ],
        responses: {
            200: {
                bodyMapper: IterationPerformance
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var getImagePerformancesOperationSpec = {
        httpMethod: "GET",
        path: "projects/{projectId}/iterations/{iterationId}/performance/images",
        urlParameters: [
            endpoint,
            projectId,
            iterationId1
        ],
        queryParameters: [
            tagIds0,
            orderBy,
            take,
            skip
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "ImagePerformance"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var getImagePerformanceCountOperationSpec = {
        httpMethod: "GET",
        path: "projects/{projectId}/iterations/{iterationId}/performance/images/count",
        urlParameters: [
            endpoint,
            projectId,
            iterationId1
        ],
        queryParameters: [
            tagIds1
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Number"
                    }
                }
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var publishIterationOperationSpec = {
        httpMethod: "POST",
        path: "projects/{projectId}/iterations/{iterationId}/publish",
        urlParameters: [
            endpoint,
            projectId,
            iterationId1
        ],
        queryParameters: [
            publishName,
            predictionId,
            overwrite
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Boolean"
                    }
                }
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var unpublishIterationOperationSpec = {
        httpMethod: "DELETE",
        path: "projects/{projectId}/iterations/{iterationId}/publish",
        urlParameters: [
            endpoint,
            projectId,
            iterationId1
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var deletePredictionOperationSpec = {
        httpMethod: "DELETE",
        path: "projects/{projectId}/predictions",
        urlParameters: [
            endpoint,
            projectId
        ],
        queryParameters: [
            ids
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var queryPredictionsOperationSpec = {
        httpMethod: "POST",
        path: "projects/{projectId}/predictions/query",
        urlParameters: [
            endpoint,
            projectId
        ],
        requestBody: {
            parameterPath: "query",
            mapper: __assign(__assign({}, PredictionQueryToken), { required: true })
        },
        responses: {
            200: {
                bodyMapper: PredictionQueryResult
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var quickTestImageOperationSpec = {
        httpMethod: "POST",
        path: "projects/{projectId}/quicktest/image",
        urlParameters: [
            endpoint,
            projectId
        ],
        queryParameters: [
            iterationId0,
            store
        ],
        formDataParameters: [
            imageData
        ],
        contentType: "multipart/form-data",
        responses: {
            200: {
                bodyMapper: ImagePrediction
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var quickTestImageUrlOperationSpec = {
        httpMethod: "POST",
        path: "projects/{projectId}/quicktest/url",
        urlParameters: [
            endpoint,
            projectId
        ],
        queryParameters: [
            iterationId0,
            store
        ],
        requestBody: {
            parameterPath: "imageUrl",
            mapper: __assign(__assign({}, ImageUrl), { required: true })
        },
        responses: {
            200: {
                bodyMapper: ImagePrediction
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var getTagsOperationSpec = {
        httpMethod: "GET",
        path: "projects/{projectId}/tags",
        urlParameters: [
            endpoint,
            projectId
        ],
        queryParameters: [
            iterationId0
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "Tag"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var createTagOperationSpec = {
        httpMethod: "POST",
        path: "projects/{projectId}/tags",
        urlParameters: [
            endpoint,
            projectId
        ],
        queryParameters: [
            name0,
            description,
            type
        ],
        responses: {
            200: {
                bodyMapper: Tag
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var getTagOperationSpec = {
        httpMethod: "GET",
        path: "projects/{projectId}/tags/{tagId}",
        urlParameters: [
            endpoint,
            projectId,
            tagId
        ],
        queryParameters: [
            iterationId0
        ],
        responses: {
            200: {
                bodyMapper: Tag
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var deleteTagOperationSpec = {
        httpMethod: "DELETE",
        path: "projects/{projectId}/tags/{tagId}",
        urlParameters: [
            endpoint,
            projectId,
            tagId
        ],
        responses: {
            204: {},
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var updateTagOperationSpec = {
        httpMethod: "PATCH",
        path: "projects/{projectId}/tags/{tagId}",
        urlParameters: [
            endpoint,
            projectId,
            tagId
        ],
        requestBody: {
            parameterPath: "updatedTag",
            mapper: __assign(__assign({}, Tag), { required: true })
        },
        responses: {
            200: {
                bodyMapper: Tag
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var suggestTagsAndRegionsOperationSpec = {
        httpMethod: "POST",
        path: "projects/{projectId}/tagsandregions/suggestions",
        urlParameters: [
            endpoint,
            projectId
        ],
        queryParameters: [
            iterationId1,
            imageIds2
        ],
        responses: {
            200: {
                bodyMapper: {
                    serializedName: "parsedResponse",
                    type: {
                        name: "Sequence",
                        element: {
                            type: {
                                name: "Composite",
                                className: "SuggestedTagAndRegion"
                            }
                        }
                    }
                }
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var trainProjectOperationSpec = {
        httpMethod: "POST",
        path: "projects/{projectId}/train",
        urlParameters: [
            endpoint,
            projectId
        ],
        queryParameters: [
            trainingType,
            reservedBudgetInHours,
            forceTrain,
            notificationEmailAddress
        ],
        requestBody: {
            parameterPath: [
                "options",
                "trainingParameters"
            ],
            mapper: TrainingParameters
        },
        responses: {
            200: {
                bodyMapper: Iteration
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };
    var importProjectOperationSpec = {
        httpMethod: "POST",
        path: "projects/import",
        urlParameters: [
            endpoint
        ],
        queryParameters: [
            token,
            name1
        ],
        responses: {
            200: {
                bodyMapper: Project
            },
            default: {
                bodyMapper: CustomVisionError
            }
        },
        serializer: serializer
    };

    exports.TrainingAPIClient = TrainingAPIClient;
    exports.TrainingAPIClientContext = TrainingAPIClientContext;
    exports.TrainingAPIMappers = Mappers;
    exports.TrainingAPIModels = index;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=cognitiveservices-customvision-training.js.map
